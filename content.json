{"meta":{"title":"自言自语","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[{"title":"Categories","date":"2019-12-15T06:20:44.215Z","updated":"2019-12-15T06:20:44.215Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2019-12-15T06:20:44.215Z","updated":"2019-12-15T06:20:44.215Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"Tags","date":"2019-12-15T09:50:39.056Z","updated":"2019-12-15T06:20:44.222Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"2019年总结","slug":"2019年总结","date":"2020-01-18T07:22:01.000Z","updated":"2020-01-19T04:42:36.285Z","comments":true,"path":"2020/01/18/2019年总结/","link":"","permalink":"http://yoursite.com/2020/01/18/2019年总结/","excerpt":"","text":"一今天是2020年1月18日，放年假前的最后一天。拖到这个时候才有时间写我的19年年终总结， 也不纯粹是年终总结吧，随便扯扯淡。 目前已经有很多同事提前回去了，过年的气氛也很浓郁，上下班的人明显变少，从街上走过也能看到一些人拖着行李来去匆匆的身影，也能感受到那种归家心切的感情。不过今年过年我不打算回去了，就呆在深圳，哪都不去， 虽然19年整体发展还不错，但是回家过年的心情对我来说并没有那么强烈。 二2019年整体来说还算是达到了自己预期的目标，终于把之前欠的所有钱都还清了，并且到年底身上还有少量的存款。一块石头下地的感觉真好啊。今年养成了记账的习惯，事无巨细的记录日常的开销，也算是一个不小的成就吧。 对目前的我来说，记账确实是一件非常重要的事情。这一年来，虽然一直在省吃俭用，但是过的和之前也并没有什么不好。看着欠的钱慢慢减少到消息，看着自己的余额慢慢在增加，这是一件让我感到非常愉快的事情。 这一年来，养成了精打细算的习惯，买菜要比价，不该买的电子产品绝对不买，衣服裤子能穿也还继续在穿，和以前的我完全是两种不同的状态。虽然外人看起来我省的有些过头了甚至到了抠门的程度，但是我自己依然还是乐在其中，自己也并没有感受到太多的生活品质下降 三2019年断断续续看了好几本书，基本山都是一些杂书，像《鬼吹灯》， 《长安十二时称》，《雪中悍刀行》这类网文， 基本没什么意义，只是打发时间而已。技术类书籍翻了翻《深入理解Java虚拟机》，《Java编程思想》，《鸟哥的Linux私房菜》这些，有效，却没有认真看完，明年的话还是要努力一些，多往技术类书籍靠拢，毕竟是靠着吃饭的东西。 四2019年整体工作平稳，基本上和往年一样，正常上班下班，每天像流水一样的生活。整体上，今年系统上学习了一遍Hibernate， 看了一些Springboot相关的东西。学着慢慢使用dubbo, zookeeper. 不过最大的问题是，目前的想法，学习到的东西还无法在工作中用上， 2020年计划自己在GitHub上开始几个自己的个人项目， 将学到的东西通过项目的形式锻炼一下，这个也是2020年必定会开启的项目 五在离年假最后的几天里，老大找我聊了一下明年的情况。 公司计划明年我这个项目组要裁员了， 叫我自己准备一下，给自己大概计划一下明年的发展。 去年整体效益不是很好，并且我们目前做的这个项目本身就是内部使用的工具，不具备营利性。产品也已经做的差不多到了后期维护的阶段了，肯定是要从整体的成本上进行控制了。 这一点我是能理解的，内心也没有太大的波动。就这样吧，我觉的目前的生活磨练的我没什么太大的波动了。明年再看吧，不过怎么样，在哪里上班，做程序员这一行，技术才是最重要的。只要自己的技术过关，也还不用太担心未来的发展。以我目前的年纪，加油吧 六2020年要完成的事情： 技术目标： 学习Springboot, dubbo, zookeeper等目前比较流行的框架 学习使用redis，并了解一些特殊问题与解决方式 复习之前的知识，了解其原理与实现细节, 并记录博客，累计写下不低于40篇博客 学习linux知识，了解基本linux命令及常用命令 利用以上知识2个自己的个人项目，github每周保持最少两次更新 生活 只要不加班的情况下就自己回家做饭，并第二天上班自己带饭，节约开支 学习一些简单的乐理基础，学习口琴，能吹奏简单的2首曲子 阅读技术或非技术类书籍不下15本 其他 英语学习，学习并记单词，能够不借助翻译看懂简单的技术类文档 开源节流，生活节俭并寻找机会扩展额外的收入来源 运动， 每日步行不少于5000步 七千里之行，始于足下。 我一定要坚持做好每一件小事，2020年，不忘初心，砥砺前行， 继续追寻自己心中的梦想。","categories":[{"name":"生活学习","slug":"生活学习","permalink":"http://yoursite.com/categories/生活学习/"}],"tags":[{"name":"2019 - 生活","slug":"2019-生活","permalink":"http://yoursite.com/tags/2019-生活/"},{"name":"总结","slug":"总结","permalink":"http://yoursite.com/tags/总结/"}]},{"title":"Hibernate学习（一）","slug":"Hibernate学习（一）","date":"2020-01-17T13:35:12.000Z","updated":"2020-01-17T13:38:35.041Z","comments":true,"path":"2020/01/17/Hibernate学习（一）/","link":"","permalink":"http://yoursite.com/2020/01/17/Hibernate学习（一）/","excerpt":"","text":"什么是Hibernate? Hibernate is an Object/Relational Mapping (ORM) solution for Java environments. Hibernate是一个用于Java环境的ORM映射框架， 基于ORM（Object Relation Mapping）思想设计，称之为对象关系映射。负责Java对象和数据库表数据之间的映射. ORM简单来说就是将数据库与实体类相互映射. 类似的ORM框架系统目前常见的如： Mybatis(以前叫iBatis)， JPA等 官方网站： https://hibernate.org/ 为什么要用ORM框架？ORM主要是解决面向对象的设计方式和关系型数据库之间的关联， Java主要面向对象设计，因此在分析业务的时候会以对象的角度来看待问题。然而数据库是关系型的，对于Java程序员而言是不符合面向对象设计的，因此才会出现ORM这种东西。有了ORM，Java开发人员在整个代码设计都将遵循对象的思维模式，这就是使用ORM最大的优势所在. 配置了ORM映射之后，查询时，ORM工具可以自动将查询结果转化为对象，增删改时，也可以直接传入对象作为参数，而不需要从对象中获取数据再使用. 为什么选择Hibernate？JDBC是Java访问数据库最基础的方式，Hibernate是基于ORM的思想，对JDBC进行了封装，它的主要优点如下： 可以将数据库查询结果ResultSet与实体类相互映射(转化) 隐藏了具体的SQL+JDBC细节，封装在工具底层， 不需要程序员参与 不与数据库直接关联，Hibernate是一种通用的数据库框架, 支持超过30种以上的数据库，可以方便数据库移植。 基本上任何数据库都可以执行它的API， 因为Hibernate的API种是不涉及SQL语句的， 它会根据配置文件自动生成对应的数据库的SQL Hibernate与Mybatis的比较？市面上的ORM框架有很多， 我在工作中接触最多的还是hibernate和mybatis两种，这两种也是被讨论最多的两种ORM框架，当然Spring JPA目前也越来越流行了，不过我目前还没有具体的了解过。到底选择Hibernate还是选择mybatis，也一直吵的不可开交，各有各的说法。可以看一下知乎上的讨论 为什么国内流行mybatis，国外反而多用hibernate？ Hibernate好点还是MyBatis好点？ hibernate和mybatis总的来说是ORM框架的这两个实现方向， hibernate更强调于面向对象(Object-oriented programming， 简称OOP)，这样，移植性扩展性更强。 mybatis更强调于面向sql， 复用程度没有面向对象要求高，但是更利于定制，对于SQL的优化更好. 我的看法：hibernate的面向对象思想更完善，此外，Oracle对于ORM有专门的标准-JPA， JPA也是以面向对象的思想进行设计的，可见，官方也是更加认同这样的设计思路。当然，Mybatis对于目前大部分公司的业务现状来说，使用效果更好，这也是不可忽视的。对于各种不同的ORM框架，如果只是用起来，其实还是非常简单的一件事情，看一文档，写几个Demo，就能进行最初级的使用，如果真的要深入研究，那就需要以后多花时间再慢慢研究了.","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://yoursite.com/categories/技术开发/"},{"name":"ORM","slug":"技术开发/ORM","permalink":"http://yoursite.com/categories/技术开发/ORM/"},{"name":"Hibernate","slug":"技术开发/ORM/Hibernate","permalink":"http://yoursite.com/categories/技术开发/ORM/Hibernate/"}],"tags":[{"name":"Hibernate","slug":"Hibernate","permalink":"http://yoursite.com/tags/Hibernate/"},{"name":"ORM","slug":"ORM","permalink":"http://yoursite.com/tags/ORM/"}]},{"title":"自言自语","slug":"index","date":"2019-12-15T14:02:06.000Z","updated":"2019-12-15T14:25:47.360Z","comments":true,"path":"2019/12/15/index/","link":"","permalink":"http://yoursite.com/2019/12/15/index/","excerpt":"","text":"又又又一次下定决心要好好写博客了，每次折腾半天，更换新主题，研究配置。最后都是坚持不了几天就放弃了。 这一次就不给自己立Flag了，随缘记录吧。 这个博客，以后会承载我大部分的生活，情感，记录。 主要内容还是工作，编程学习方面的。偶尔会更新一些自己生活中的经历与感想。 之所以起名叫自言自语，主要还是自己本身还是一个不善言辞的人，超级死宅，这个博客估计也不会有其他人看到， 所以，不小心进来看到这些的你，谢谢你的光临。 之前使用过各种其他的笔记工具，bitbucket, oneNote, github, 为知笔记，有道云笔记，Notion. 也在博客园，CSDN写过一些， 最后还是感觉自己喜欢折腾， 还是希望能拥有一个属于自己的博客啊。 后续会慢慢将其他地方记录的日志，博文迁移到这里汇总， 也会继续好好更新这里， 努力加油吧。 最后，这个博客主题，使用的是hexo-theme-Wikitten 真的很好看啊，感谢原作者的创作。","categories":[],"tags":[]},{"title":"Tomcat学习笔记(1) Tomcat简介及启动信息","slug":"Tomcat学习笔记(1) Tomcat简介及启动信息","date":"2018-11-28T12:36:17.000Z","updated":"2019-12-15T14:24:56.725Z","comments":true,"path":"2018/11/28/Tomcat学习笔记(1) Tomcat简介及启动信息/","link":"","permalink":"http://yoursite.com/2018/11/28/Tomcat学习笔记(1) Tomcat简介及启动信息/","excerpt":"","text":"前言Tomcat是一个开源的Servlet容器,属于Apache软件基金会旗下的项目。Tomcat由Java实现，所以其运行依赖于Java环境，运行Tomcat前需要正确安装JRE. 官方网站： http://tomcat.apache.org/ 之前在servlet笔记中说到Tomcat作为一个Servlet容器，最主要的功能就是监听端口，接收用户请求，然后解析请求，生成request和response对象，再传递给servlet进行处理，等servlet处理完毕后返回response,再讲返回的response返回给客户端。 那么Tomcat到底是怎样完成这样一个过程呢？它又由哪些组件组成，每一个组件都负责干什么呢?这就是接下来Tomcat系列笔记索要探讨的内容。 ps: 虽然网上各种大大小小的博客与分析代码层出不穷，但是自己却从来没有深入的去研究过，别人写的再好，也只能作为参考，自己真正去用了，去实践了，才能让自己深入的理解！ Tomcat与Servlet,JSP之间的对应关系不同的tomcat版本对应不同的servlet和jsp版本，版本之间的对应关系如下： Servlet版本 JSP版本 Tomcat版本 WebSocket 4.0 2.3 9.0.x 1.1 3.1 2.3 8.5.x 1.1 3.1 2.3 8.0.x 1.1 3.0 2.2 7.0.x 1.1 2.5 2.1 6.0.x(archived) N/A 2.4 2.0 5.5.x(archived) N/A 2.3 1.2 4.1.x(archived) N/A 数据来源： http://tomcat.apache.org/whichversion.html 此份笔记记录时使用的是Tomcat8.5.35，windows10平台。 主要目录从Tomcat官网下载完tomcat之后，解压tomcat可以看到tomcat的目录结构，其中一些关键的文件夹为 /bin 启动与关闭其一些其他脚本存在的地方，其中.sh后缀的文件用于linux环境，.bat后缀的文件用于windows环境 /conf 系统配置文件所在，其中最重要的文件是server.xml /logs 默认的日志文件存在此处 /webapps web应用存在的地方 CATALINA_HOME and CATALINA_BASE在整个Tomcat文档中，引入了以下两个属性 CATALINA_HOME： 表示Tomcat安装的根目录，如/home/tomcat/apache-tomcat-9.0.10或C:\\Program Files\\apache-tomcat-9.0.10 CATALINA_BASE： 表示特定Tomcat实例的运行时配置的根。如果要在一台计算机上拥有多个Tomcat实例，就需要使用CATALINA_BASE属性。 从启动说起startup.batTomcat的启动文件是bin目录下的startup.bat文件，linux为startup.sh。这个文件的功能主要是设置CATALINA_HOME的值，然后执行其下的catalina.bat文件 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758@echo offrem Licensed to the Apache Software Foundation (ASF) under one or morerem contributor license agreements. See the NOTICE file distributed withrem this work for additional information regarding copyright ownership.rem The ASF licenses this file to You under the Apache License, Version 2.0rem (the &quot;License&quot;); you may not use this file except in compliance withrem the License. You may obtain a copy of the License atremrem http://www.apache.org/licenses/LICENSE-2.0remrem Unless required by applicable law or agreed to in writing, softwarerem distributed under the License is distributed on an &quot;AS IS&quot; BASIS,rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.rem See the License for the specific language governing permissions andrem limitations under the License.rem ---------------------------------------------------------------------------rem Start script for the CATALINA Serverrem ---------------------------------------------------------------------------setlocalrem Guess CATALINA_HOME if not definedset &quot;CURRENT_DIR=%cd%&quot;if not &quot;%CATALINA_HOME%&quot; == &quot;&quot; goto gotHomeset &quot;CATALINA_HOME=%CURRENT_DIR%&quot;if exist &quot;%CATALINA_HOME%\\bin\\catalina.bat&quot; goto okHomecd ..set &quot;CATALINA_HOME=%cd%&quot;cd &quot;%CURRENT_DIR%&quot;:gotHomeif exist &quot;%CATALINA_HOME%\\bin\\catalina.bat&quot; goto okHomeecho The CATALINA_HOME environment variable is not defined correctlyecho This environment variable is needed to run this programgoto end:okHomeset &quot;EXECUTABLE=%CATALINA_HOME%\\bin\\catalina.bat&quot;rem Check that target executable existsif exist &quot;%EXECUTABLE%&quot; goto okExececho Cannot find &quot;%EXECUTABLE%&quot;echo This file is needed to run this programgoto end:okExecrem Get remaining unshifted command line arguments and save them in theset CMD_LINE_ARGS=:setArgsif &quot;&quot;%1&quot;&quot;==&quot;&quot;&quot;&quot; goto doneSetArgsset CMD_LINE_ARGS=%CMD_LINE_ARGS% %1shiftgoto setArgs:doneSetArgscall &quot;%EXECUTABLE%&quot; start %CMD_LINE_ARGS%:end 解释： 第1行echo为打印命令，此处为关闭打印信息 接下来的rem为注释语法，主要是一些许可证（License）信息 第21行，设置环境变量,关于setLocal命令参照 https://www.jb51.net/article/36043.htm 第24行需要注意，在Dos命令中，%cd%为当前路径，比如我的startup.bat文件在D:\\develop_software\\apache-tomcat-8.0.53\\bin之下，那么此处的%cd%就为这个路径 第25-35行为设置CATALINA_HOME的路径，因为在28行中有一个cd..返回了上一层，那么此处设置的 CATALINA_HOME就为D:\\develop_software\\apache-tomcat-8.0.53 第38-45行，验证%CATALINA_HOME%\\bin\\catalina.bat是否存在，不存在则输出错误信息，存在则进入下一层，跳转到48行 第48-55行，设置CMD_LINE_ARGS的值 第56行，调用%EXECUTABLE%， 也就是%CATALINA_HOME%\\bin\\catalina.bat， 传递两个参数：start, %CMD_LINE_ARGS% catalina.bat123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372@echo offrem Licensed to the Apache Software Foundation (ASF) under one or morerem contributor license agreements. See the NOTICE file distributed withrem this work for additional information regarding copyright ownership.rem The ASF licenses this file to You under the Apache License, Version 2.0rem (the &quot;License&quot;); you may not use this file except in compliance withrem the License. You may obtain a copy of the License atremrem http://www.apache.org/licenses/LICENSE-2.0remrem Unless required by applicable law or agreed to in writing, softwarerem distributed under the License is distributed on an &quot;AS IS&quot; BASIS,rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.rem See the License for the specific language governing permissions andrem limitations under the License.rem ---------------------------------------------------------------------------rem Start/Stop Script for the CATALINA Serverremrem Environment Variable Prerequisitesremrem Do not set the variables in this script. Instead put them into a scriptrem setenv.bat in CATALINA_BASE/bin to keep your customizations separate.remrem WHEN RUNNING TOMCAT AS A WINDOWS SERVICE:rem Note that the environment variables that affect the behavior of thisrem script will have no effect at all on Windows Services. As such, anyrem local customizations made in a CATALINA_BASE/bin/setenv.bat scriptrem will also have no effect on Tomcat when launched as a Windows Service.rem The configuration that controls Windows Services is stored in the Windowsrem Registry, and is most conveniently maintained using the &quot;tomcatXw.exe&quot;rem maintenance utility, where &quot;X&quot; is the major version of Tomcat you arerem running.remrem CATALINA_HOME May point at your Catalina &quot;build&quot; directory.remrem CATALINA_BASE (Optional) Base directory for resolving dynamic portionsrem of a Catalina installation. If not present, resolves torem the same directory that CATALINA_HOME points to.remrem CATALINA_OPTS (Optional) Java runtime options used when the &quot;start&quot;,rem &quot;run&quot; or &quot;debug&quot; command is executed.rem Include here and not in JAVA_OPTS all options, that shouldrem only be used by Tomcat itself, not by the stop process,rem the version command etc.rem Examples are heap size, GC logging, JMX ports etc.remrem CATALINA_TMPDIR (Optional) Directory path location of temporary directoryrem the JVM should use (java.io.tmpdir). Defaults torem %CATALINA_BASE%\\temp.remrem JAVA_HOME Must point at your Java Development Kit installation.rem Required to run the with the &quot;debug&quot; argument.remrem JRE_HOME Must point at your Java Runtime installation.rem Defaults to JAVA_HOME if empty. If JRE_HOME and JAVA_HOMErem are both set, JRE_HOME is used.remrem JAVA_OPTS (Optional) Java runtime options used when any commandrem is executed.rem Include here and not in CATALINA_OPTS all options, thatrem should be used by Tomcat and also by the stop process,rem the version command etc.rem Most options should go into CATALINA_OPTS.remrem JAVA_ENDORSED_DIRS (Optional) Lists of of semi-colon separated directoriesrem containing some jars in order to allow replacement of APIsrem created outside of the JCP (i.e. DOM and SAX from W3C).rem It can also be used to update the XML parser implementation.rem Note that Java 9 no longer supports this feature.rem Defaults to $CATALINA_HOME/endorsed.remrem JPDA_TRANSPORT (Optional) JPDA transport used when the &quot;jpda start&quot;rem command is executed. The default is &quot;dt_socket&quot;.remrem JPDA_ADDRESS (Optional) Java runtime options used when the &quot;jpda start&quot;rem command is executed. The default is localhost:8000.remrem JPDA_SUSPEND (Optional) Java runtime options used when the &quot;jpda start&quot;rem command is executed. Specifies whether JVM should suspendrem execution immediately after startup. Default is &quot;n&quot;.remrem JPDA_OPTS (Optional) Java runtime options used when the &quot;jpda start&quot;rem command is executed. If used, JPDA_TRANSPORT, JPDA_ADDRESS,rem and JPDA_SUSPEND are ignored. Thus, all required jpdarem options MUST be specified. The default is:remrem -agentlib:jdwp=transport=%JPDA_TRANSPORT%,rem address=%JPDA_ADDRESS%,server=y,suspend=%JPDA_SUSPEND%remrem JSSE_OPTS (Optional) Java runtime options used to control the TLSrem implementation when JSSE is used. Default is:rem &quot;-Djdk.tls.ephemeralDHKeySize=2048&quot;remrem LOGGING_CONFIG (Optional) Override Tomcat&apos;s logging config filerem Example (all one line)rem set LOGGING_CONFIG=&quot;-Djava.util.logging.config.file=%CATALINA_BASE%\\conf\\logging.properties&quot;remrem LOGGING_MANAGER (Optional) Override Tomcat&apos;s logging managerrem Example (all one line)rem set LOGGING_MANAGER=&quot;-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager&quot;remrem TITLE (Optional) Specify the title of Tomcat window. The defaultrem TITLE is Tomcat if it&apos;s not specified.rem Example (all one line)rem set TITLE=Tomcat.Cluster#1.Server#1 [%DATE% %TIME%]rem ---------------------------------------------------------------------------setlocalrem Suppress Terminate batch job on CTRL+Cif not &quot;&quot;%1&quot;&quot; == &quot;&quot;run&quot;&quot; goto mainEntryif &quot;%TEMP%&quot; == &quot;&quot; goto mainEntryif exist &quot;%TEMP%\\%~nx0.run&quot; goto mainEntryecho Y&gt;&quot;%TEMP%\\%~nx0.run&quot;if not exist &quot;%TEMP%\\%~nx0.run&quot; goto mainEntryecho Y&gt;&quot;%TEMP%\\%~nx0.Y&quot;call &quot;%~f0&quot; %* &lt;&quot;%TEMP%\\%~nx0.Y&quot;rem Use provided errorlevelset RETVAL=%ERRORLEVEL%del /Q &quot;%TEMP%\\%~nx0.Y&quot; &gt;NUL 2&gt;&amp;1exit /B %RETVAL%:mainEntrydel /Q &quot;%TEMP%\\%~nx0.run&quot; &gt;NUL 2&gt;&amp;1rem Guess CATALINA_HOME if not definedset &quot;CURRENT_DIR=%cd%&quot;if not &quot;%CATALINA_HOME%&quot; == &quot;&quot; goto gotHomeset &quot;CATALINA_HOME=%CURRENT_DIR%&quot;if exist &quot;%CATALINA_HOME%\\bin\\catalina.bat&quot; goto okHomecd ..set &quot;CATALINA_HOME=%cd%&quot;cd &quot;%CURRENT_DIR%&quot;:gotHomeif exist &quot;%CATALINA_HOME%\\bin\\catalina.bat&quot; goto okHomeecho The CATALINA_HOME environment variable is not defined correctlyecho This environment variable is needed to run this programgoto end:okHomerem Copy CATALINA_BASE from CATALINA_HOME if not definedif not &quot;%CATALINA_BASE%&quot; == &quot;&quot; goto gotBaseset &quot;CATALINA_BASE=%CATALINA_HOME%&quot;:gotBaserem Ensure that neither CATALINA_HOME nor CATALINA_BASE contains a semi-colonrem as this is used as the separator in the classpath and Java provides norem mechanism for escaping if the same character appears in the path. Check thisrem by replacing all occurrences of &apos;;&apos; with &apos;&apos; and checking that neitherrem CATALINA_HOME nor CATALINA_BASE have changedif &quot;%CATALINA_HOME%&quot; == &quot;%CATALINA_HOME:;=%&quot; goto homeNoSemicolonecho Using CATALINA_HOME: &quot;%CATALINA_HOME%&quot;echo Unable to start as CATALINA_HOME contains a semicolon (;) charactergoto end:homeNoSemicolonif &quot;%CATALINA_BASE%&quot; == &quot;%CATALINA_BASE:;=%&quot; goto baseNoSemicolonecho Using CATALINA_BASE: &quot;%CATALINA_BASE%&quot;echo Unable to start as CATALINA_BASE contains a semicolon (;) charactergoto end:baseNoSemicolonrem Ensure that any user defined CLASSPATH variables are not used on startup,rem but allow them to be specified in setenv.bat, in rare case when it is needed.set CLASSPATH=rem Get standard environment variablesif not exist &quot;%CATALINA_BASE%\\bin\\setenv.bat&quot; goto checkSetenvHomecall &quot;%CATALINA_BASE%\\bin\\setenv.bat&quot;goto setenvDone:checkSetenvHomeif exist &quot;%CATALINA_HOME%\\bin\\setenv.bat&quot; call &quot;%CATALINA_HOME%\\bin\\setenv.bat&quot;:setenvDonerem Get standard Java environment variablesif exist &quot;%CATALINA_HOME%\\bin\\setclasspath.bat&quot; goto okSetclasspathecho Cannot find &quot;%CATALINA_HOME%\\bin\\setclasspath.bat&quot;echo This file is needed to run this programgoto end:okSetclasspathcall &quot;%CATALINA_HOME%\\bin\\setclasspath.bat&quot; %1if errorlevel 1 goto endrem Add on extra jar file to CLASSPATHrem Note that there are no quotes as we do not want to introduce randomrem quotes into the CLASSPATHif &quot;%CLASSPATH%&quot; == &quot;&quot; goto emptyClasspathset &quot;CLASSPATH=%CLASSPATH%;&quot;:emptyClasspathset &quot;CLASSPATH=%CLASSPATH%%CATALINA_HOME%\\bin\\bootstrap.jar&quot;if not &quot;%CATALINA_TMPDIR%&quot; == &quot;&quot; goto gotTmpdirset &quot;CATALINA_TMPDIR=%CATALINA_BASE%\\temp&quot;:gotTmpdirrem Add tomcat-juli.jar to classpathrem tomcat-juli.jar can be over-ridden per instanceif not exist &quot;%CATALINA_BASE%\\bin\\tomcat-juli.jar&quot; goto juliClasspathHomeset &quot;CLASSPATH=%CLASSPATH%;%CATALINA_BASE%\\bin\\tomcat-juli.jar&quot;goto juliClasspathDone:juliClasspathHomeset &quot;CLASSPATH=%CLASSPATH%;%CATALINA_HOME%\\bin\\tomcat-juli.jar&quot;:juliClasspathDoneif not &quot;%JSSE_OPTS%&quot; == &quot;&quot; goto gotJsseOptsset JSSE_OPTS=&quot;-Djdk.tls.ephemeralDHKeySize=2048&quot;:gotJsseOptsset &quot;JAVA_OPTS=%JAVA_OPTS% %JSSE_OPTS%&quot;rem Register custom URL handlersrem Do this here so custom URL handles (specifically &apos;war:...&apos;) can be used in the security policyset &quot;JAVA_OPTS=%JAVA_OPTS% -Djava.protocol.handler.pkgs=org.apache.catalina.webresources&quot;if not &quot;%LOGGING_CONFIG%&quot; == &quot;&quot; goto noJuliConfigset LOGGING_CONFIG=-Dnopif not exist &quot;%CATALINA_BASE%\\conf\\logging.properties&quot; goto noJuliConfigset LOGGING_CONFIG=-Djava.util.logging.config.file=&quot;%CATALINA_BASE%\\conf\\logging.properties&quot;:noJuliConfigif not &quot;%LOGGING_MANAGER%&quot; == &quot;&quot; goto noJuliManagerset LOGGING_MANAGER=-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager:noJuliManagerrem Configure JAVA 9 specific start-up parametersset &quot;JDK_JAVA_OPTIONS=%JDK_JAVA_OPTIONS% --add-opens=java.base/java.lang=ALL-UNNAMED&quot;set &quot;JDK_JAVA_OPTIONS=%JDK_JAVA_OPTIONS% --add-opens=java.base/java.io=ALL-UNNAMED&quot;set &quot;JDK_JAVA_OPTIONS=%JDK_JAVA_OPTIONS% --add-opens=java.rmi/sun.rmi.transport=ALL-UNNAMED&quot;rem Java 9 no longer supports the java.endorsed.dirsrem system property. Only try to use it ifrem JAVA_ENDORSED_DIRS was explicitly setrem or CATALINA_HOME/endorsed exists.set ENDORSED_PROP=ignore.endorsed.dirsif &quot;%JAVA_ENDORSED_DIRS%&quot; == &quot;&quot; goto noEndorsedVarset ENDORSED_PROP=java.endorsed.dirsgoto doneEndorsed:noEndorsedVarif not exist &quot;%CATALINA_HOME%\\endorsed&quot; goto doneEndorsedset ENDORSED_PROP=java.endorsed.dirs:doneEndorsedrem ----- Execute The Requested Command ---------------------------------------echo Using CATALINA_BASE: &quot;%CATALINA_BASE%&quot;echo Using CATALINA_HOME: &quot;%CATALINA_HOME%&quot;echo Using CATALINA_TMPDIR: &quot;%CATALINA_TMPDIR%&quot;if &quot;&quot;%1&quot;&quot; == &quot;&quot;debug&quot;&quot; goto use_jdkecho Using JRE_HOME: &quot;%JRE_HOME%&quot;goto java_dir_displayed:use_jdkecho Using JAVA_HOME: &quot;%JAVA_HOME%&quot;:java_dir_displayedecho Using CLASSPATH: &quot;%CLASSPATH%&quot;set _EXECJAVA=%_RUNJAVA%set MAINCLASS=org.apache.catalina.startup.Bootstrapset ACTION=startset SECURITY_POLICY_FILE=set DEBUG_OPTS=set JPDA=if not &quot;&quot;%1&quot;&quot; == &quot;&quot;jpda&quot;&quot; goto noJpdaset JPDA=jpdaif not &quot;%JPDA_TRANSPORT%&quot; == &quot;&quot; goto gotJpdaTransportset JPDA_TRANSPORT=dt_socket:gotJpdaTransportif not &quot;%JPDA_ADDRESS%&quot; == &quot;&quot; goto gotJpdaAddressset JPDA_ADDRESS=localhost:8000:gotJpdaAddressif not &quot;%JPDA_SUSPEND%&quot; == &quot;&quot; goto gotJpdaSuspendset JPDA_SUSPEND=n:gotJpdaSuspendif not &quot;%JPDA_OPTS%&quot; == &quot;&quot; goto gotJpdaOptsset JPDA_OPTS=-agentlib:jdwp=transport=%JPDA_TRANSPORT%,address=%JPDA_ADDRESS%,server=y,suspend=%JPDA_SUSPEND%:gotJpdaOptsshift:noJpdaif &quot;&quot;%1&quot;&quot; == &quot;&quot;debug&quot;&quot; goto doDebugif &quot;&quot;%1&quot;&quot; == &quot;&quot;run&quot;&quot; goto doRunif &quot;&quot;%1&quot;&quot; == &quot;&quot;start&quot;&quot; goto doStartif &quot;&quot;%1&quot;&quot; == &quot;&quot;stop&quot;&quot; goto doStopif &quot;&quot;%1&quot;&quot; == &quot;&quot;configtest&quot;&quot; goto doConfigTestif &quot;&quot;%1&quot;&quot; == &quot;&quot;version&quot;&quot; goto doVersionecho Usage: catalina ( commands ... )echo commands:echo debug Start Catalina in a debuggerecho debug -security Debug Catalina with a security managerecho jpda start Start Catalina under JPDA debuggerecho run Start Catalina in the current windowecho run -security Start in the current window with security managerecho start Start Catalina in a separate windowecho start -security Start in a separate window with security managerecho stop Stop Catalinaecho configtest Run a basic syntax check on server.xmlecho version What version of tomcat are you running?goto end:doDebugshiftset _EXECJAVA=%_RUNJDB%set DEBUG_OPTS=-sourcepath &quot;%CATALINA_HOME%\\..\\..\\java&quot;if not &quot;&quot;%1&quot;&quot; == &quot;&quot;-security&quot;&quot; goto execCmdshiftecho Using Security Managerset &quot;SECURITY_POLICY_FILE=%CATALINA_BASE%\\conf\\catalina.policy&quot;goto execCmd:doRunshiftif not &quot;&quot;%1&quot;&quot; == &quot;&quot;-security&quot;&quot; goto execCmdshiftecho Using Security Managerset &quot;SECURITY_POLICY_FILE=%CATALINA_BASE%\\conf\\catalina.policy&quot;goto execCmd:doStartshiftif &quot;%TITLE%&quot; == &quot;&quot; set TITLE=Tomcatset _EXECJAVA=start &quot;%TITLE%&quot; %_RUNJAVA%if not &quot;&quot;%1&quot;&quot; == &quot;&quot;-security&quot;&quot; goto execCmdshiftecho Using Security Managerset &quot;SECURITY_POLICY_FILE=%CATALINA_BASE%\\conf\\catalina.policy&quot;goto execCmd:doStopshiftset ACTION=stopset CATALINA_OPTS=goto execCmd:doConfigTestshiftset ACTION=configtestset CATALINA_OPTS=goto execCmd:doVersion%_EXECJAVA% -classpath &quot;%CATALINA_HOME%\\lib\\catalina.jar&quot; org.apache.catalina.util.ServerInfogoto end:execCmdrem Get remaining unshifted command line arguments and save them in theset CMD_LINE_ARGS=:setArgsif &quot;&quot;%1&quot;&quot;==&quot;&quot;&quot;&quot; goto doneSetArgsset CMD_LINE_ARGS=%CMD_LINE_ARGS% %1shiftgoto setArgs:doneSetArgsrem Execute Java with the applicable propertiesif not &quot;%JPDA%&quot; == &quot;&quot; goto doJpdaif not &quot;%SECURITY_POLICY_FILE%&quot; == &quot;&quot; goto doSecurity%_EXECJAVA% %LOGGING_CONFIG% %LOGGING_MANAGER% %JAVA_OPTS% %CATALINA_OPTS% %DEBUG_OPTS% -D%ENDORSED_PROP%=&quot;%JAVA_ENDORSED_DIRS%&quot; -classpath &quot;%CLASSPATH%&quot; -Dcatalina.base=&quot;%CATALINA_BASE%&quot; -Dcatalina.home=&quot;%CATALINA_HOME%&quot; -Djava.io.tmpdir=&quot;%CATALINA_TMPDIR%&quot; %MAINCLASS% %CMD_LINE_ARGS% %ACTION%goto end:doSecurity%_EXECJAVA% %LOGGING_CONFIG% %LOGGING_MANAGER% %JAVA_OPTS% %CATALINA_OPTS% %DEBUG_OPTS% -D%ENDORSED_PROP%=&quot;%JAVA_ENDORSED_DIRS%&quot; -classpath &quot;%CLASSPATH%&quot; -Djava.security.manager -Djava.security.policy==&quot;%SECURITY_POLICY_FILE%&quot; -Dcatalina.base=&quot;%CATALINA_BASE%&quot; -Dcatalina.home=&quot;%CATALINA_HOME%&quot; -Djava.io.tmpdir=&quot;%CATALINA_TMPDIR%&quot; %MAINCLASS% %CMD_LINE_ARGS% %ACTION%goto end:doJpdaif not &quot;%SECURITY_POLICY_FILE%&quot; == &quot;&quot; goto doSecurityJpda%_EXECJAVA% %LOGGING_CONFIG% %LOGGING_MANAGER% %JAVA_OPTS% %JPDA_OPTS% %CATALINA_OPTS% %DEBUG_OPTS% -D%ENDORSED_PROP%=&quot;%JAVA_ENDORSED_DIRS%&quot; -classpath &quot;%CLASSPATH%&quot; -Dcatalina.base=&quot;%CATALINA_BASE%&quot; -Dcatalina.home=&quot;%CATALINA_HOME%&quot; -Djava.io.tmpdir=&quot;%CATALINA_TMPDIR%&quot; %MAINCLASS% %CMD_LINE_ARGS% %ACTION%goto end:doSecurityJpda%_EXECJAVA% %LOGGING_CONFIG% %LOGGING_MANAGER% %JAVA_OPTS% %JPDA_OPTS% %CATALINA_OPTS% %DEBUG_OPTS% -D%ENDORSED_PROP%=&quot;%JAVA_ENDORSED_DIRS%&quot; -classpath &quot;%CLASSPATH%&quot; -Djava.security.manager -Djava.security.policy==&quot;%SECURITY_POLICY_FILE%&quot; -Dcatalina.base=&quot;%CATALINA_BASE%&quot; -Dcatalina.home=&quot;%CATALINA_HOME%&quot; -Djava.io.tmpdir=&quot;%CATALINA_TMPDIR%&quot; %MAINCLASS% %CMD_LINE_ARGS% %ACTION%goto end:end 第1行与第109行不用细看，从第112行开始 第112行到122： 这之间的代码都为参数校验，具体的参数详情我也并没有详细了解过 第123-139： 校验CATALINA_HOME和%CATALINA_HOME%\\bin\\catalina.bat, 由于我们已经在startup.bat中确认了这两个参数的存在，所以会直接从136行的判断中跳转到140行的okHome 第140-144： 设置CATALINA_BASE这个变量的值，因为本身不存在，所以143行的判断为false,在144行设置其值为%CATALINA_HOME%, 然后代码接着往下走，进入第152行 第152-161行： 这里我并不知道152和158中的%CATALINA_BASE:;=%的值是什么，但是猜想一下：已知条件CATALINA_BASE和CATALINA_HOME目前是同一个值，如果152行if判断为false, 不进行跳转，那么会接着执行，在155会结束这个文件，那么接下来的所有代码都没什么意义了，所以这里的if判断应该是true,相应的在158行也为true, 进入162行 第162-174： 这里定义了一个变量CLASSPATH，然后判断CATALINA_BASE%\\bin\\setenv.bat这个文件是否存在，如果存在，执行它。这次因为我们下载下来并没有这个文件，接着往下再看. 第175-182： 判断%CATALINA_HOME%\\bin\\setclasspath.bat这个文件是否存在，存在则执行，不存在直接退出。 因为当前系统中有这个文件，所以并不会在此退出，关于setclasspath.bat这个文件，后面会详细说明，下面先继续往下执行. 这个文件的主要作用是验证Java环境变量，即JAVA_HOME的值，并定义了_RUNJAVA的值 第183-262：设置了一堆变量，这里183的判断errorLevel是什么意思，我并不清楚，但是如果为true,直接结束了这个文件，所以应该会继续往下走。此处需要注意，在这里面有一处设置变量的地方有一些问题，即第256行处 1set _EXECJAVA=%_RUNJAVA% 这个地方_RUNJAVA并没有值，这里先跳过，后面再说。 第263-345： 这一段前面也是设置值，然后进行判断，中间有一段打印信息。这些都不用追究太深，需要注意的是在这一段代码最终会进入到346行这个标记execCmd，在这里第322行也可以看到这个变量_RUNJAVA,依然没有值。在这处对于_RUNJAVA这个值进行了更改。 1set _EXECJAVA=start &quot;%TITLE%&quot; %_RUNJAVA% 需要注意： start是一个dos命令，可参考：https://blog.csdn.net/mydriverc/article/details/2049347。 这里把_EXECJAVA这个变量设置成了一个dos命令，并为它传递了第一个参数%TITLE%, 那么既然是个命令，必然有其存在的作用，我们后面再说。 第346-354：设置变量CMD_LINE_ARGS的值，然后继续往下。 第355-372：这一块的代码就主要围绕_RUNJAVA这个参数来进行了，前面将这个参数设置成了一个命令start，那么在这一块就是调用它的时候， 而后面所接的内容，都是这个命令所传的参数。 而这一块正常执行的代码在第359行 1%_EXECJAVA% %LOGGING_CONFIG% %LOGGING_MANAGER% %JAVA_OPTS% %CATALINA_OPTS% %DEBUG_OPTS% -D%ENDORSED_PROP%=&quot;%JAVA_ENDORSED_DIRS%&quot; -classpath &quot;%CLASSPATH%&quot; -Dcatalina.base=&quot;%CATALINA_BASE%&quot; -Dcatalina.home=&quot;%CATALINA_HOME%&quot; -Djava.io.tmpdir=&quot;%CATALINA_TMPDIR%&quot; %MAINCLASS% %CMD_LINE_ARGS% %ACTION% start命令传递的第一个参数为新打开窗口的标题参数，这个已经在322行设置过了，后面所有一长串参数一直到倒数第三个参数，为这个命令所携带的参数。 在这里我们需要注意的是末尾的参数%MAINCLASS%和%CMD_LINE_ARGS% %ACTION%。 在%MAINCLASS%这个变量是在257行定义的，值为org.apache.catalina.startup.Bootstrap, 所以我们最后页说Tomcat的启动最终是启动org.apache.catalina.startup.Bootstrap这个类中的方法。 setclasspath.bat12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394@echo offrem Licensed to the Apache Software Foundation (ASF) under one or morerem contributor license agreements. See the NOTICE file distributed withrem this work for additional information regarding copyright ownership.rem The ASF licenses this file to You under the Apache License, Version 2.0rem (the &quot;License&quot;); you may not use this file except in compliance withrem the License. You may obtain a copy of the License atremrem http://www.apache.org/licenses/LICENSE-2.0remrem Unless required by applicable law or agreed to in writing, softwarerem distributed under the License is distributed on an &quot;AS IS&quot; BASIS,rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.rem See the License for the specific language governing permissions andrem limitations under the License.rem ---------------------------------------------------------------------------rem Set JAVA_HOME or JRE_HOME if not already set, ensure any provided settingsrem are valid and consistent with the selected start-up options and set up therem endorsed directory.rem ---------------------------------------------------------------------------rem Make sure prerequisite environment variables are setrem In debug mode we need a real JDK (JAVA_HOME)if &quot;&quot;%1&quot;&quot; == &quot;&quot;debug&quot;&quot; goto needJavaHomerem Otherwise either JRE or JDK are fineif not &quot;%JRE_HOME%&quot; == &quot;&quot; goto gotJreHomeif not &quot;%JAVA_HOME%&quot; == &quot;&quot; goto gotJavaHomeecho Neither the JAVA_HOME nor the JRE_HOME environment variable is definedecho At least one of these environment variable is needed to run this programgoto exit:needJavaHomerem Check if we have a usable JDKif &quot;%JAVA_HOME%&quot; == &quot;&quot; goto noJavaHomeif not exist &quot;%JAVA_HOME%\\bin\\java.exe&quot; goto noJavaHomeif not exist &quot;%JAVA_HOME%\\bin\\jdb.exe&quot; goto noJavaHomeif not exist &quot;%JAVA_HOME%\\bin\\javac.exe&quot; goto noJavaHomeset &quot;JRE_HOME=%JAVA_HOME%&quot;goto okJava:noJavaHomeecho The JAVA_HOME environment variable is not defined correctly.echo It is needed to run this program in debug mode.echo NB: JAVA_HOME should point to a JDK not a JRE.goto exit:gotJavaHomerem No JRE given, use JAVA_HOME as JRE_HOMEset &quot;JRE_HOME=%JAVA_HOME%&quot;:gotJreHomerem Check if we have a usable JREif not exist &quot;%JRE_HOME%\\bin\\java.exe&quot; goto noJreHomegoto okJava:noJreHomerem Needed at least a JREecho The JRE_HOME environment variable is not defined correctlyecho This environment variable is needed to run this programgoto exit:okJavarem Don&apos;t override the endorsed dir if the user has set it previouslyif not &quot;%JAVA_ENDORSED_DIRS%&quot; == &quot;&quot; goto gotEndorseddirrem Java 9 no longer supports the java.endorsed.dirsrem system property. Only try to use it ifrem CATALINA_HOME/endorsed exists.if not exist &quot;%CATALINA_HOME%\\endorsed&quot; goto gotEndorseddirset &quot;JAVA_ENDORSED_DIRS=%CATALINA_HOME%\\endorsed&quot;:gotEndorseddirrem Don&apos;t override _RUNJAVA if the user has set it previouslyif not &quot;%_RUNJAVA%&quot; == &quot;&quot; goto gotRunJavarem Set standard command for invoking Java.rem Also note the quoting as JRE_HOME may contain spaces.set _RUNJAVA=&quot;%JRE_HOME%\\bin\\java.exe&quot;:gotRunJavarem Don&apos;t override _RUNJDB if the user has set it previouslyrem Also note the quoting as JAVA_HOME may contain spaces.if not &quot;%_RUNJDB%&quot; == &quot;&quot; goto gotRunJdbset _RUNJDB=&quot;%JAVA_HOME%\\bin\\jdb.exe&quot;:gotRunJdbgoto end:exitexit /b 1:endexit /b 0 第1-63行： 判断Java环境变量是否存在，即验证%JAVA_HOME%的值，如果不存在直接退出。 第64-86行： 验证一些文件是否存在，最后设置_RUNJDB的值，在第85行。 1set _RUNJDB=&quot;%JAVA_HOME%\\bin\\jdb.exe&quot; 总结由于本人对于dos命令的理解也并不深刻，上面对于Tomcat的启动文件分析可能会有一定的错误，但是大致流程应该是对的，如果有什么错误的地方，请为我指出，谢谢。 既然已经知道Tomcat启动最终会执行org.apache.catalina.startup.Bootstrap，下一篇再来详细看一看这个类中的方法。 ###","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://yoursite.com/categories/技术开发/"},{"name":"服务器","slug":"技术开发/服务器","permalink":"http://yoursite.com/categories/技术开发/服务器/"},{"name":"Tomcat","slug":"技术开发/服务器/Tomcat","permalink":"http://yoursite.com/categories/技术开发/服务器/Tomcat/"}],"tags":[{"name":"Tomcat","slug":"Tomcat","permalink":"http://yoursite.com/tags/Tomcat/"},{"name":"服务器","slug":"服务器","permalink":"http://yoursite.com/tags/服务器/"}]},{"title":"JavaWeb开发学习笔记之Servlet（四） Filter与Listener","slug":"Servlet(4)Filter与Listener","date":"2018-11-21T12:53:25.000Z","updated":"2019-12-15T14:14:34.810Z","comments":true,"path":"2018/11/21/Servlet(4)Filter与Listener/","link":"","permalink":"http://yoursite.com/2018/11/21/Servlet(4)Filter与Listener/","excerpt":"","text":"Filter简介Filter过滤器，其作用是请求到达servlet之前对其进行过滤，对其进行预处理，在servlet对于请求处理完毕返回后对响应对象进行后处理。 Filter本身并不申请请求对象(Request)和响应对象(Response)， 只提供过滤功能。 Filter是Servlet三大组件(Servlet,Filter,Listener)之一,是设计模式中过滤器模式的体现 创建FilterFilter的创建和Servlet的创建方式大同小异。创建Filter处理类，在web.xml中进行配置。 所有servlet filter过滤器都需要实现javax.servlet.Filter接口，并实现该接口中的三个方法 init(FilterConfig filterConfig) doFilter(ServletRequest request, ServletResponse response, FilterChain chain) destroy() 例子，配置一个简单的Filter： 12345678910111213141516171819202122232425public class LoginFilter implements Filter&#123; @Override public void init(FilterConfig filterConfig) throws ServletException &#123; System.out.println(&quot;filter init...&quot;); // Filter创建时调用此方法进行初始化, filterConfig的用法和ServletConfig类似 &#125; @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123; // 进入servlet之前调用 System.out.println(&quot;before enter servlet&quot;); chain.doFilter(request, response); System.out.println(&quot;after servlet&quot;); // 处理之后调用 &#125; @Override public void destroy() &#123; // 当前Filter声明周期结束，调用此方法释放销毁 System.out.println(&quot;destroy...&quot;); &#125;&#125; 在web.xml中配置12345678&lt;filter&gt; &lt;filter-name&gt;loginFilter&lt;/filter-name&gt; &lt;filter-class&gt;cn.hel.util.LoginFilter&lt;/filter-class&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;loginFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/login&lt;/url-pattern&gt;&lt;/filter-mapping&gt; 关于Filter的配置， 在servlet3.0以上的版本中增加了注解配置，无需继续在web.xml中进行配置，直接在类上使用@WebFilter注解即可，例： 1234@WebFilter(filterName=&quot;loginFilter&quot;,urlPatterns=&quot;/hello&quot;)public class LoginFilter implements Filter&#123;&#125; 对于@WebFilter注解与web.xml中配置Filter的属性对照,@WebFilter注解的属性都为可选属性，但是value或者urlPatterns,servletNames通常是必须存在其中之一，它配置了Filter过滤的限定范围，且value,urlPatterns两个属性不能共存，一般我们是用urlPattern，忽略value属性 属性名 类型 描述 filterName String 指定Servlet的name属性，等价于&lt;filter-name&gt;。 value String[] 该属性等价于urlPatterns属性。但是两者不应该同时使用。 urlPatterns String[] 指定一组过滤器的URL匹配模式。等价于&lt;url-pattern&gt; 标签。 servletNames String[] 指定过滤器将应用于哪些Servlet.取值是@WebServlet中的 name属性的取值，或者是web.xml中&lt;servlet-name&gt;的取值。 dispatcherTypes DispatcherType 指定过滤器的转发模式，具体取值包括：ASYNC, ERROR, FORWARD, INCLUDE, REQUEST initParams WebInitParam[] 指定一组过滤器初始化参数，等价于&lt;init-param&gt; 标签。 asyncSupported boolean 声明过滤器是否支持异步操作模式，等价于&lt;async-supported&gt;标签。 description String 该过滤器的描述信息，等价于&lt;description&gt;标签。 displayName String 该过滤器的显示名，通常配合工具使用，等价于&lt;display-name&gt;标签。 Filter的执行顺序如果定义了多个Filter,且一个请求同事会被多个Filter进行拦截，那么Filter的执行顺序根据web.xml中配置的Filter信息中&lt;filter-mapping&gt;的顺序从上到下执行 Filter总结Filter其实没有什么太多需要注意的地方，它和servlet非常相似，方法也大同小异。可以看成是servlet的变种,区别就是Filter不能直接对用户生成响应而 实际上Filter里的doFilter()方法里的代码就是从多个servlet的service()方法抽取的通用代码，通过使用filter可以实现更好的复用 利用Filetr我们可以用来做登录验证，关键字过滤，日志记录等模块的开发，但是现实常常使用Spring来进行开发，Spring有更加优秀的功能(Interceptor)来让我们进行处理，所以Filter的使用反而现在已经变少了,具体后面的spring笔记中会记录到 Listener简介Listener是Servlet的监听器，它可以监听客户端的请求，服务端的操作。 我们平常做开发的使用通常会给按钮增加监听器，点击这个按钮，触发一项监听事件，如Java swing开发中的ActionListener. 监听器Listener的内容就是在application,session,request三个对象创建、销毁或者往其中添加修改删除属性时自动执行代码的功能组件。 Listener是Servlet三大组件(Servlet,Filter,Listener)之一,是设计模式中观察者模式的体现 Listener监听类型Listener监听器分为三种监听类型 对Session的操作， HttpSessionListener 对Request的操作， ServletReuqestListener 对context的操作， ServletContextListener 创建Listener实例需要先创建Listener处理类，需要监控哪种类型就实现哪种类型的监听接口，由于JAVA接口可以多实现的特性，所以也可以将所有类型的监听都放在一个java类中，不过这样耦合性太高，不建议这样做 Listener的监听对象及方法监听类型监听内容与接口方法说明request生命周期:ServletContextRequest接口用于监听用户请求requestInitialized()创建request时requestDestroyed()销毁request时属性: ServletRequestAttributeListener接口用于监听ServletRequest范围（Request）内属性的改变attributeAdded()增加request属性时attributeRemoved移除request属性时attributeReplaced()修改request属性时session生命周期:HttpSessionListener接口用于监听用户Session的开始和结束sessionCreated()创建session时sessionDestroyed()销毁session时属性:HttpSessionAttributeListener接口用于监听HttpSession范围（Session）内属性的改变attributeAdded()增加session属性时attributeRemoved()移除session属性时attributeReplaced()修改session属性时context生命周期:ServletContextListener接口用于监听Web应用的启动和关闭contextInitialized(ServletContextEvent sce)创建context时contextDestroyed(ServletContextEvent sce)销毁context时属性:ServletContextAttributeListener接口用于监听ServletContext范围（Application）内属性的改变attributeAdded()新增context属性attributeRemoved()移除context属性attributeReplaced()修改context属性 定义一个简单的Listener例子以MyServletContextListener为例 配置Listener类123456789101112131415public class MyServletContextListener implements ServletContextListener &#123; @Override public void contextInitialized(ServletContextEvent sce) &#123; System.out.println(&quot;context was be created&quot;); &#125; @Override public void contextDestroyed(ServletContextEvent sce) &#123; System.out.println(&quot;context was be destroy...&quot;); &#125;&#125; web.xml中配置：123&lt;listener&gt; &lt;listener-class&gt;cn.hel.util.MyServletContextListener&lt;/listener-class&gt;&lt;/listener&gt; 关于Listener的配置， 在servlet3.0以上的版本中增加了注解配置，无需继续在web.xml中进行配置，直接在类上使用@WebListener注解即可，例： 1234@WebListenerpublic class MyServletContextListener implements ServletContextListener &#123;&#125; 对于@WebListener注解与web.xml中配置listener的属性对照： 属性名 类型 是否可选 描述 value String 是 该监听器的描述信息。 Listener的应用关于Servlet Listener的应用有很多，举几个常用的例子，如： 初始化整个网站所用的参数（ServletContextListener），日志记录，记录网站的在线人数等. 在Spring中，最常见的就是使用ContextLoaderListener来获取Spring运行相关的配置信息，如下1234567&lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring/applicationContext-*.xml&lt;/param-value&gt;&lt;/context-param&gt;&lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;&lt;/listener&gt; 以及通过RequestContextListener扩展ServletRequestListener,用来配合DispatcherServlet的实现等. Servlet,Filter,Listener的初始化顺序以上已经将Servlet三大组件（servlet,filter,listener）已经记录完了，他们对应的初始化方法分别为 init(ServletConfig config) init(FilterConfig filterConfig) contextInitialized(ServletContextEvent arg0) 使用之前的例子来进行测试，完整web.xml配置如下：1234567891011121314151617181920212223&lt;servlet&gt; &lt;servlet-name&gt;hello&lt;/servlet-name&gt; &lt;servlet-class&gt;cn.hel.util.HelloServlet&lt;/servlet-class&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;hello&lt;/servlet-name&gt; &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;&lt;filter&gt; &lt;filter-name&gt;loginFilter&lt;/filter-name&gt; &lt;filter-class&gt;cn.hel.util.LoginFilter&lt;/filter-class&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;loginFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;&lt;/filter-mapping&gt;&lt;listener&gt; &lt;listener-class&gt;cn.hel.util.MyServletContextListener&lt;/listener-class&gt;&lt;/listener&gt; 此处因为需要注意的是Servlet需要加&lt;load-on-startup&gt;进行测试，否则servlet只在请求到达时才会初始化，无法验证效果 输出结果： 他们三者的默认运行顺序为 Listener &gt; Filter &gt; Servlet，销毁顺序为： servlet &gt; filter &gt; listener 如果在web.xml中配置了&lt;context-param&gt;，则初始化顺序为context-param &gt; Listener &gt; Filter &gt; Servlet 参考： CSDN: Servlet学习笔记（九）：监听器Listener详解 Java中的Listener 监听器 Iteye: web.xml 中的listener、 filter、servlet 加载顺序及其详解","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://yoursite.com/categories/技术开发/"},{"name":"Java","slug":"技术开发/Java","permalink":"http://yoursite.com/categories/技术开发/Java/"},{"name":"JavaWeb","slug":"技术开发/Java/JavaWeb","permalink":"http://yoursite.com/categories/技术开发/Java/JavaWeb/"},{"name":"Servlet","slug":"技术开发/Java/JavaWeb/Servlet","permalink":"http://yoursite.com/categories/技术开发/Java/JavaWeb/Servlet/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"},{"name":"Java Web","slug":"Java-Web","permalink":"http://yoursite.com/tags/Java-Web/"},{"name":"servlet","slug":"servlet","permalink":"http://yoursite.com/tags/servlet/"}]},{"title":"JavaWeb开发学习笔记之Servlet（三） Cookie与Session, 及Servlet线程安全问题","slug":"Servlet(3)Cookie与Session, 及Servlet线程安全问题","date":"2018-11-20T16:10:08.000Z","updated":"2019-12-15T14:14:40.920Z","comments":true,"path":"2018/11/21/Servlet(3)Cookie与Session, 及Servlet线程安全问题/","link":"","permalink":"http://yoursite.com/2018/11/21/Servlet(3)Cookie与Session, 及Servlet线程安全问题/","excerpt":"","text":"Cookie与SessionCookieCookie是服务器发送给浏览器的体积很小的纯文本信息，用户以后访问同一个Web服务器时浏览器会把它们原样发送给服务器。引用维基百科的解释： 指某些网站为了辨别用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密） cookie是识别当前用户，实现持久对话的最好方式，目前所有主流浏览器都支持，以至于Http协议都为其定义了新的Http头部。 Cookie的特点 cookie通过请求头/响应头在服务器与客户端之间传输，大小限制为4KB 一台服务器在一个客户端最多保存20个cookie 一个浏览器最多保存300个cookie cookie的name和value都不能使用中文，如果需要使用中文，需要对中文进行URL编码,解码操作。 Cookie的应用cookie一般有两个作用，识别用户身份和记录历史 识别用户身份： 假设一个A用户访问了，a.com, 那么服务器就给这个用户A返回一个cookie,如[cookie=A], 当A再次访问时a.com时，请求中就会带上[cookie=A]这个cookie. 同理,用户B访问a.com时，服务器分配一个cookie,[cookie=B]给B用户，当B再次访问时，会在请求中带上[cookie=B]这个cookie。 这样，服务器就能够知道到底是A在访问还是B在访问了 记录历史，常见的如购物车功能。假设一个用户A进入一个购物网站，讲a商品，b商品添加到购物车，那么这个购物网站就会给这个用户A返回一个cookie, 如：[cookie=A, cart=a,b],这样，当用户下次再进入这个网站时，会将这个cookie一并带入请求，就可以看到商品a，b依然躺在购物车里了。 Sessionsession是一种持久网络协议，在用户（或用户代理）端和服务器端之间创建关联，从而起到交换数据包的作用机制。在一段时间内，一个客户与Web服务器的一系列交互过程，称为”会话”，也就是session， session是一个比较抽象的概念， 我们今天常说的session，是为了绕开cookie的各种限制，通常借住cookie本身和后端存储实现的，一种更高级的状态实现。session是由服务器端生成的，存储在服务器端。 我们可以对session设置过期时间，单位是分钟，在web.xml中配置：123&lt;session-config&gt; &lt;session-timeout&gt;30&lt;/session-timeout&gt; &lt;/session-config&gt; 需要注意的是我们如果在代码中设置session的过期时间，单位是秒,如：1session.setMaxInactiveInterval(int seconds) tomcat的默认session过期时间为30分钟 Session与Cookie的比较说明 session在服务器端，cookie在客户端（浏览器） session存储的数据量大，数据类型丰富。 cookie存储的数据量不超过4KB，且只能存储ASCII字符串。 根据以上第一点，安全性方面session优于cookie. cookie在客户端中是可见的。 跨域方面cookie优于session，cookie只要设置domain域更改即可。 对于服务器的压力，session的压力大大高于cookie 有效期的不同，只要关闭了浏览器session就会失效，不能完成信息永久保存，且如果session设置的超时过长，服务器累计的session就会越多，越容易招致内存溢出。 通常我们的做法是将用户的登录信息，如账号密码保存在session中，在cookie保存此session的session id,请求时让保存的session id随着cookie一同访问，通过session id的机智来获取session进行验证即可。 Servlet的线程安全问题Servlet的线程安全问题当Servlet容器接收到Client的Http请求时，容器会先从线程池中取出一个线程然后找到该请求对应的Servlet对象，并进行初始化（init), 再调用service()方法， 而当另一个客户端再次发出请求访问该servlet时，并不会再次初始化这个servlet,不会调用init，也就是说，多个线程在使用这一个servlet实例。JSP/Servlet容器默认采用的是单实例方式处理多个请求，这样设计的好处是减少产生Servlet实例的开销，提升了对请求的响应时间。对于Tomcat可以在server.xml中通过元素设置线程池中线程的数目。 也正因为此，我们不能在Servlet中修改成员变量，否则会引发线程安全问题 如何开发线程安全的Servlet关于如何开发线程安全的Servlet，可以从以下几点入手： 变量：将参数变量本地化，使用局部变量而不是成员变量。 属性： ServletContext,HttpSession,ServletRequest对象中的属性.其中,ServletContext和HttpSession是线程不安全的，因为这两个对象可以同时被多个servlet对象共享。ServletRequest对象是线程安全的，对于每一个请求都会创建一个新的ServletRequest对象，所以ServletRequest对象只能在一个线程中被访问，它是线程安全的。 使用同步快Synchronized,防止可能异步调用的代码块。为多线程增加排队 使用同步的集合类，使用Vector代替ArrayList,使用HashTable代替HashMap。 不要再Servlet中创建自己的线程来完成某个功能 在多个Servlet中对外部对象（如文件）进行修改操作一定要加锁，做到互斥的访问 实现ServletThreadModel接口javax.servlet.SingleThreadModel接口是一个标识接口，如果一个Servlet实现了这个接口，那Servlet容器将保证在一个时刻仅有一个线程可以在给定的servlet实例的service方法中执行。将其他所有请求进行排队。 123public class xxx extends HttpServlet implements SingleThreadModel&#123; // 这种方法会产生大量系统开销，尽量不要用。SingleThreadModel已废弃&#125; 如果使用了SingleThreadModel接口，服务器可以使用多个实例来处理请求，代替单个实例的请求排队带来的效益问题。服务器创建一个Servlet类的多个Servlet实例组成的实例池，对于每个请求分配Servlet实例进行响应处理，之后放回到实例池中等待下此请求。这样就造成并发访问的问题。 此时,局部变量(字段)也是安全的，但对于全局变量和共享数据是不安全的，需要进行同步处理。而对于这样多实例的情况SingleThreadModel接口并不能解决并发访问问题。SingleThreadModel接口在servlet规范中已经被废弃了。 参考与引用： 知乎：cookie是什么 知乎：认识HTTP—-Cookie和Session篇 博客园：Servlet的多线程和线程安全 知乎：Servlet与多线程的关系是什么","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://yoursite.com/categories/技术开发/"},{"name":"Java","slug":"技术开发/Java","permalink":"http://yoursite.com/categories/技术开发/Java/"},{"name":"JavaWeb","slug":"技术开发/Java/JavaWeb","permalink":"http://yoursite.com/categories/技术开发/Java/JavaWeb/"},{"name":"Servlet","slug":"技术开发/Java/JavaWeb/Servlet","permalink":"http://yoursite.com/categories/技术开发/Java/JavaWeb/Servlet/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"},{"name":"Java Web","slug":"Java-Web","permalink":"http://yoursite.com/tags/Java-Web/"},{"name":"servlet","slug":"servlet","permalink":"http://yoursite.com/tags/servlet/"}]},{"title":"JavaWeb开发学习笔记之Servlet（二） Servlet生命周期与配置信息","slug":"Servlet(2)Servlet生命周期与配置信息","date":"2018-11-19T15:13:02.000Z","updated":"2019-12-15T14:14:47.431Z","comments":true,"path":"2018/11/19/Servlet(2)Servlet生命周期与配置信息/","link":"","permalink":"http://yoursite.com/2018/11/19/Servlet(2)Servlet生命周期与配置信息/","excerpt":"","text":"创建Servlet对象的过程 当Servlet容器启动时，会首先读取web.xml配置文件的信息，构造指定的Servlet对象，创建ServletConfig对象，同时将ServletConfig对象作为参数来调用Servlet对象的init方法。 在Servlet容器启动后：客户首次向Servlet发出请求，Servlet容器会判断内存中是否存在指定的Servlet对象，如果没有则创建它，然后根据客户的请求创建HttpRequest、HttpResponse对象，从而调用Servlet 对象的service方法。 Servlet容器在启动时自动创建Servlet，这是由在web.xml文件中为Servlet设置的&lt;load-on-startup&gt;属性决定的。从中我们也能看到同一个类型的Servlet对象在Servlet容器中以单例的形式存在。web.xml配置如下： 12345&lt;servlet&gt; &lt;servlet-name&gt;Init&lt;/servlet-name&gt; &lt;servlet-class&gt;org.xl.servlet.InitServlet&lt;/servlet-class&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;&lt;/servlet&gt; 关于&lt;load-on-startup&gt;的含义是， 标记容器是否在启动的时候就加载这个servlet； 当是一个负数或者未指定时，则指示容器在该servlet被选择时才加载。 正数的值越小，启动该servlet的优先级越高 如何创建配置Servlet关于Servlet的创建于使用我们需要两个实现要步 创建一个java类，继承HttpServlet类。 当然，根据JAVA的类继承顺序，我们也可以对HttpServlet的父类进行操作，但是继承HttpServlet类是最常见的，因为HttpServlet类帮我们内部实现了一部分方法，无需我们手动再进行实现 配置web.xml文件 例： 12345678910111213141516171819202122232425262728import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.http.HttpServlet;public class HelloServlet extends HttpServlet &#123; @Override public void init() throws ServletException &#123; System.out.println(&quot;init....&quot;); // Servlet初始化 &#125; @Override public void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; System.out.println(&quot;进入Service方法&quot;); // 实际进行业务逻辑处理的地方 &#125; @Override public void destroy() &#123; System.out.println(&quot;destroy....&quot;); // Servlet销毁 &#125;&#125; 在web.xml配置1234567891011&lt;servlet&gt; &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;cn.hel.util.HelloServlet&lt;/servlet-class&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;// &lt;servlet&gt;用于注册Servlet，包含了&lt;servlet-name&gt;和&lt;servlet-class&gt;两个子元素，分别用于设置servlet的名称以及servlet的类名。// &lt;servlet-mapping&gt;用于映射上面&lt;servlet&gt;中的对外访问路径，同样包含&lt;servlet-name&gt;和&lt;url-pattern&gt;两个元素，分别用于设置servlet的名称以及servlet的对外访问路径。 测试启动与发送请求，输出： Servlet的生命周期关于Servlet的生命周期，在上面的例子中其实也可以看到。servlet的声明周期主要围绕三个方法进行，init(), service(), destroy(), 关于这三个方法的说明如下。 init()，Servlet初始化时调用，只执行一次 service(), 直接处理业务逻辑请求的方法 destroy(), Servlet生命周期结束时调用，进行销毁。只执行一次 ServletConfigServletConfig主要用于加载Servlet的初始化参数,在一个web应用可以存在多个ServletConfig对象。 ServletConfig主要包含四个方法 String getServletName() – 获取当前Servlet在web.xml中配置的名字 String getInitParameter(String name) – 获取当前Servlet指定名称的初始化参数的值 Enumeration getInitParameterNames() – 获取当前Servlet所有初始化参数的名字组成的枚举 ServletContext getServletContext() – 获取代表当前web应用的ServletContext对象 ServletConfig获取基本配置信息在Servlet的配置文件中，可以使用一个或多个标签为servlet配置一些初始化参数。（配置在某个 servlet标签）当servlet配置了初始化参数后，web容器在创建servlet实例对象时，会自动将这些初始化参数 封装到ServletConfig对象中，并在调用servlet的init方法时，将ServletConfig对象传递给servlet,因此通过ServletConfig对象就可以得到当前servlet的初始化参数信息。 ServletConfig代表的是Servlet在web.xml中的配置信息,对应web.xml中的Servlet元素 例： 12345678910111213141516171819202122&lt;servlet&gt; &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;cn.hel.util.HelloServlet&lt;/servlet-class&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;!--配置HelloServlet的初始化参数 --&gt; &lt;init-param&gt; &lt;param-name&gt;name&lt;/param-name&gt; &lt;param-value&gt;gacl&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;password&lt;/param-name&gt; &lt;param-value&gt;123&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;charset&lt;/param-name&gt; &lt;param-value&gt;UTF-8&lt;/param-value&gt; &lt;/init-param&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; 在HttpServlet中获取.123456789101112131415161718192021222324252627282930313233public class HelloServlet extends HttpServlet &#123; @Override public void init() throws ServletException &#123; &#125; @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; System.out.println(&quot;======进入Service方法========&quot;); ServletConfig config = this.getServletConfig(); System.out.println(&quot;ServletName: &quot;+config.getServletName()); //获取在web.xml中配置的初始化参数 String paramVal = config.getInitParameter(&quot;name&quot;);//获取指定的初始化参数 System.out.println(paramVal); //获取所有的初始化参数 Enumeration&lt;String&gt; e = config.getInitParameterNames(); while(e.hasMoreElements())&#123; String name = e.nextElement(); String value = config.getInitParameter(name); System.out.println(name + &quot;=&quot; + value); &#125; &#125; @Override public void destroy() &#123; System.out.println(&quot;destroy....&quot;); &#125;&#125; 输出： 我们如果是用IDE工具进行调试的话（此处我用的是Eclipse+Tomcat），其实可以看到我们获取的ServletConfig对象，本身都是一个org.apache.catalina.core.StandardWrapperFacade类对象，来源于Tomcat容器。针对这一点，在以后tomcat的笔记中再进行详细研究。 关于Servlet的配置， 在servlet3.0以上的版本中增加了注解配置，无需继续在web.xml中进行配置，直接在类上使用@WebServlet注解即可，例：123456@WebServlet(name = &quot;hello&quot;, urlPatterns = &#123; &quot;/hello&quot;, &quot;/hello/*&quot; &#125;, loadOnStartup = 1, initParams = &#123; @WebInitParam(name = &quot;name&quot;, value = &quot;gacl&quot;), @WebInitParam(name = &quot;password&quot;, value = &quot;123&quot;), @WebInitParam(name = &quot;charset&quot;, value = &quot;UTF-8&quot;) &#125;)public class HelloServlet extends HttpServlet &#123;&#125; 对于@WebServlet注解与web.xml中配置servlet的属性对照，@WebServlet注解的属性都为可选属性，但是value或者urlPatterns通常是必须存在其中之一，它配置了servlet请求的限定范围，且两个属性不能共存，一般我们是用urlPattern，忽略value属性。 属性名 类型 描述 name String 指定Servlet的name属性，等价于&lt;servlet-name&gt;。如果没有显式指定，则该 Servlet 的取值即为类的全限定名。 value String[] 该属性等价于 urlPatterns 属性。两个属性不能同时使用。 urlPatterns String[] 指定一组Servlet的URL匹配模式。等价于&lt;url-pattern&gt;标签。 loadOnStartup int 指定Servlet的加载顺序，等价于&lt;load-on-startup&gt;标签。 initParams WebInitParam[] 指定一组Servlet初始化参数，等价于&lt;init-param&gt;标签。 asyncSupported boolean 声明Servlet是否支持异步操作模式，等价于&lt;async-supported&gt;标签。 description String 该Servlet的描述信息，等价于&lt;description&gt;标签。 displayName String 该Servlet的显示名，通常配合工具使用，等价于&lt;display-name&gt;标签。 关于initParams的值，它是一个WebInitParam数组，数组中的每一个值由一个@WebInitParam注解进行配置，关于@WebInitParam注解，不光配合@WebServlet中可以使用，在配置过滤器使用@Filter时也可以使用，以下是@WebInitParam的参数说明 属性名 类型 是否可选 描述 name String 否 指定参数的名字，等价于&lt;param-name&gt;。 value String 否 指定参数的值，等价于&lt;param-value&gt;。 description String 是 关于参数的描述，等价于&lt;description&gt;。 ServletContext对象ServletContext对象的定义ServletContext代表的是当前的web应用，是Servlet容器上下文环境对象。定义一组方法，servlet使用这些方法与其servlet容器进行通信。例如，获取文件的 MIME 类型、分发请求或写入日志文件。每个web应用都有且仅有一个ServletContext对象，这个对象在所有的Servlet都可以使用。 以下为ServletContext源码中对其的定义说明。 123456789101112131415161718192021/** * Defines a set of methods that a servlet uses to communicate with its * servlet container, for example, to get the MIME type of a file, dispatch * requests, or write to a log file. * * &lt;p&gt;There is one context per &quot;web application&quot; per Java Virtual Machine. (A * &quot;web application&quot; is a collection of servlets and content installed under a * specific subset of the server&apos;s URL namespace such as &lt;code&gt;/catalog&lt;/code&gt; * and possibly installed via a &lt;code&gt;.war&lt;/code&gt; file.) * * &lt;p&gt;In the case of a web * application marked &quot;distributed&quot; in its deployment descriptor, there will * be one context instance for each virtual machine. In this situation, the * context cannot be used as a location to share global information (because * the information won&apos;t be truly global). Use an external resource like * a database instead. * * &lt;p&gt;The &lt;code&gt;ServletContext&lt;/code&gt; object is contained within * the &#123;@link ServletConfig&#125; object, which the Web server provides the * servlet when the servlet is initialized. */ ServletContext对象的获取方式在Servlet中获取ServletContext对象可通过以下三种方式获得 this.getServletContext(); this.getServletConfig().getServletContext(); request.getSession().getServletContext(); 三种方式获取的ServletContext对象都为同一个。 ServletContext的作用web容器启动时，它为每一个web程序都创建一个对应的ServletContext对象，它代表着当前的web应用，事实上SpringMVC封装的ApplicationContext及Struts2封装的ApplicationContext里面都保存着原本的ServletContext. ServletConfig获取的是配置在web.xml中的信息，ServletContext可以获取外部资源信息，如常用的properties文件信息。 ServletContext配置的参数，可以被同一web应用下的所有servlet共享， 也正因此，Servlet对象之间可以通过ServletContext对象进行通讯，ServletContext通常也被称为域对象。 总结ServletContext的作用： Web应用范围内存共享数据；访问web应用的静态资源； Servlet对应之间通过ServletContext对象实现通讯。 例，获取web.xml中配置的上下文初始化参数： 在web.xml配置12345&lt;!-- 配置context --&gt;&lt;context-param&gt; &lt;param-name&gt;username&lt;/param-name&gt; &lt;param-value&gt;zhangsan&lt;/param-value&gt;&lt;/context-param&gt; 在servlet中获取123ServletContext context = this.getServletContext();context.getInitParameter(&quot;username&quot;)// ServletContext中的getInitParameter()和getInitParameterNames()方法与ServletConfig中的用法一致 例，获取ServletContext的上下文属性12345ServletContext context =this.getServletContext();context.setAttribute(&quot;name&quot;,&quot;value&quot;);context.getAttribute(&quot;name&quot;); Enumberation p=application.getAttributeNames(); ServletContext的主要方法 属性相关，web应用范围内存共享数据 1234setAttribute(String name,Object obj): 添加属性getAttribute(String name): 获取属性，返回ObjectremoveAttribute(name): 删除属性： getAttributeNames(), 获取所有属性 加载资源文件，访问静态资源 getResource(String parh): 获取代表某个资源的url对象，其中，path必须是/开头，代表当前web应用程序的根目录 1234URL url = context.getResource(&quot;/WEB-INF/classes/jdbc.properties&quot;);//得到URL InputStream in_url = url.openStream();//直接得到流 Properties props1 = new Properties(); props1.load(in_url);//获取资源文件 getResoutceAsStream(String parh)，返回文件流。这个好处是可以使用相对于根目录的路径访问到web目录下的所有文件，而不必知道绝对路径。123InputStream in = context.getResourceAsStream(&quot;/WEB-INF/classes/jdbc.properties&quot;); Properties props = new Properties(); props.load(in); 请求转发与重定向请求转发能实现的主要原因是由于ServletContext的数据共享。 关于请求转发与重定向的模式说明，举例，一个人去银行办事，如果柜台的员工无法处理，她叫你等在这里，去叫经理过来处理，那么这就是请求转发， 重定向是，一个人去银行办事，如果柜台的员工无法处理，她说这个业务我们这个网点办理不了，建议去其他网点办理，然后你就去了另外一个网点办理业务，这就是重定向。 请求转发与重定向的区别 类别 请求转发 重定向 浏览器URL 原来的url 新的url 请求次数 1次 2次 跳转范围 只能请求项目中的资源 可以跳转到项目外 转发 只能请求项目中的资源 可以跳转到项目外 请求转发的实现方式12RequestDispatcher rd = this.getServletContext().getRequestDispatcher(urlPath);rd.forward(request, response); 重定向1response.sendRedirect(urlPath); 使用ServletContext动态配置在servlet3.0以后的版本中对于ServletContext的性能进行了增强，该对象支持在运行时动态部署Servlet，Filter，Listener,以及为Servlet和Filter增加url映射。 此处我们以Servlet为例，Filter与Listener的与其大同小异。 之前我们说到配置一个servlet有两种方式 在web.xml中配置映射 为servlet对象增加@WebServlet注解配置映射 在3.0以后的servlet版本中，ServeltContext类中对于Servlet增加了以下几个方法。 ServletRegistration.Dynamic addServlet(String servletName, String className); ServletRegistration.Dynamic addServlet(String servletName, Servlet servlet) ServletRegistration.Dynamic addServlet(String servletName, String className) T createServlet(Class clazz) ServletRegistration getServletRegistration(String servletName) Map&lt;String,? extends ServletRegistration&gt; getServletRegistrations()、 关于以上几个方法，前三个重载方法为添加serlvet到注册中心，createServlet动态创建一个servlet, 后两个为获取注册中心ServletRegistration。 ServletRegistration，这个类提供动态注册，像SpringBoot就是通过动态注册servlet到容器。 使用context动态注册新的servlet，是在context初始化时调用。即，在ServletContextListener的contexInitialized()方法中， 或者是在ServletContainerInitializer类中的onStartup()方法中被调用。ServletContainerInitializer是servlet3.0后新增的一个接口 例： 新建一个Servlet类12345678public class DynamicCreateTestServlet extends HttpServlet &#123; @Override public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException &#123; System.out.println(&quot;DynamicCreateTestServlet service ......&quot;); &#125;&#125; 在context初始化时动态注册一个新的Servlet123456789101112131415161718192021222324252627282930@WebListenerpublic class MyServletContextListener implements ServletContextListener &#123; @Override public void contextInitialized(ServletContextEvent sce) &#123; System.out.println(&quot;listener init... &quot;); // 在Listener监听器中获取ServletContext ServletContext context = sce.getServletContext(); HttpServlet servlet; try &#123; // 创建一个Servlet servlet = context.createServlet(DynamicCreateTestServlet.class); // 将创建的Servlet添加到注册中心,键为servlet-name, 值为新建的servlet类 context.addServlet(&quot;testServlet&quot;, servlet); // 根据新建的servlet,通过其servlet-name获取对应的注册中心 ServletRegistration registration = context.getServletRegistration(&quot;testServlet&quot;); // 为注册中心增加映射,相当于为新建的servlet增加urlPattern, 值为一个动态String数组 registration.addMapping(&quot;/dynimcServlet&quot;); &#125; catch (ServletException e) &#123; System.out.println(&quot;dynamic add servlet fail&quot;); e.printStackTrace(); &#125; &#125; @Override public void contextDestroyed(ServletContextEvent sce) &#123; System.out.println(&quot;listener destroy...&quot;); &#125;&#125; 这里还有一点，获取注册中心ServletRegistration时除了使用getServletRegistration()方法精确获取某一个ServletRegistration之外1ServletRegistration getServletRegistration(String servletName) 也可以使用getServletRegistrations()获取所有注册注册中心1Map&lt;String,? extends ServletRegistration&gt; getServletRegistrations() 而我们获取的这个Map打印时，除了我们自己配置的Servlet，还有两个不是我们配置的Servlet， 它们的servlet-name一个叫default,一个叫jsp，这两者来源于我使用的tomcat容器，在后面tomcat的内容中会进行讲述。 参考与引用： IBM developerWorks: Servlet3.0新特性详解——张建平","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://yoursite.com/categories/技术开发/"},{"name":"Java","slug":"技术开发/Java","permalink":"http://yoursite.com/categories/技术开发/Java/"},{"name":"JavaWeb","slug":"技术开发/Java/JavaWeb","permalink":"http://yoursite.com/categories/技术开发/Java/JavaWeb/"},{"name":"Servlet","slug":"技术开发/Java/JavaWeb/Servlet","permalink":"http://yoursite.com/categories/技术开发/Java/JavaWeb/Servlet/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"},{"name":"Java Web","slug":"Java-Web","permalink":"http://yoursite.com/tags/Java-Web/"},{"name":"servlet","slug":"servlet","permalink":"http://yoursite.com/tags/servlet/"}]},{"title":"JavaWeb开发学习笔记之Servlet（一） Servlet与Servlet容器的概念","slug":"Servlet(1) Servlet与Servlet容器的概念","date":"2018-11-12T13:56:30.000Z","updated":"2019-12-16T13:46:59.175Z","comments":true,"path":"2018/11/12/Servlet(1) Servlet与Servlet容器的概念/","link":"","permalink":"http://yoursite.com/2018/11/12/Servlet(1) Servlet与Servlet容器的概念/","excerpt":"","text":"Servlet的定义 Servlet是一种Java编写的后台服务程序, 主要功能是交互式地浏览和修改数据，生成动态Web内容，可以理解为http请求与数据库或其他程序之间的中间层。 要说清楚什么是Servlet还是得从Servlet容器开始说起。 Servlet容器Servlet容器（Servlet Container），也可以称为Servlet引擎。是web服务器或应用服务器的一部分。 Servlet本身是不能独立运行的，必须部署到Servlet容器中运行。 由Servlet容器实例化和调用servlet方法，Servlet容器在Servlet生命周期内包含和管理servlet。常见的servlet容器有tomcat, JBoss, Jetty, Web logic等。 我们平常的Servlet开发过程中,接收请求这项工作并不是直接由Servlet来工作的,Servlet并不直接与客户端打交道。真正负责这项工作的是servlet容器。接收请求,监听端口这些工作都是由servlet容器来操作完成的。 随便谷歌一个servlet的hello world教程，里面都会让你写一个servlet，但是从来不会在servlet中写什么监听8080端口的代码，servlet不会直接和客户端打交道！。 tomcat等Servlet容器才是与客户端直接打交道的家伙，它监听了端口，请求过来后，根据url等信息，确定要将请求交给哪个servlet去处理，然后调用那个servlet的service方法，service方法返回一个response对象，tomcat再把这个response返回给客户端。 说起来，Servlet与Servlet容器的关系有点像枪和子弹的关系，枪是为子弹而生，而子弹又让枪有了杀伤力。虽然它们是彼此依存的，但是又相互独立发展，这一切都是为了适应工业化生产的结果。从技术角度来说是为了解耦，通过标准化接口来相互协作。 Servlet的本质是一个接口其实不用把Servlet想象成一个非常复杂的东西，事实上,Servlet的本质就是一个接口, 接口是用来干嘛的，定义规范！所以我们也可以说，Servlet的本质是一规范， 甚至我们还可以说,J2EE的本质就是一种规范。 Servlet类结构图 以上图片来源Google Servlet最顶层的就是一个Servlet接口，它里面定义了5个方法 servlet接口定义的是一套处理网络请求的规范，所有实现servlet的类，都需要实现它那五个方法，其中最主要的是两个生命周期方法 init()和destroy()，还有一个处理请求的service()，也就是说，所有实现servlet接口的类，或者说，所有想要处理网络请求的类，都需要回答这三个问题： 你初始化时要做什么 你销毁时要做什么 你接受到请求时要做什么 这就是Java给的一种规范，就像阿西莫夫的机器人三大定律、行尸走肉里Rick的那三个问题一样，规范！ Servlet的工作原理图图一 图二 Servlet的工作模式 Web Client 向Servlet容器（Tomcat）发出Http请求 Servlet容器接收Web Client的请求 Servlet容器创建一个HttpRequest对象，将Web Client请求的信息封装到这个对象中。 Servlet容器创建一个HttpResponse对象 Servlet容器调用HttpServlet对象的service方法，把HttpRequest对象与HttpResponse对象作为参数传给HttpServlet对象。 HttpServlet调用HttpRequest对象的有关方法，获取Http请求信息。 HttpServlet调用HttpResponse对象的有关方法，生成响应数据。 Servlet容器把HttpServlet的响应结果传给Web Client。 以上。 参考与引用： 知乎：servlet的本质是什么，它是如何工作的 IBM developerWorks: Servlet工作原理解析——许令波 JavaSchool Servlet教程","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://yoursite.com/categories/技术开发/"},{"name":"Java","slug":"技术开发/Java","permalink":"http://yoursite.com/categories/技术开发/Java/"},{"name":"JavaWeb","slug":"技术开发/Java/JavaWeb","permalink":"http://yoursite.com/categories/技术开发/Java/JavaWeb/"},{"name":"Servlet","slug":"技术开发/Java/JavaWeb/Servlet","permalink":"http://yoursite.com/categories/技术开发/Java/JavaWeb/Servlet/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"},{"name":"Java Web","slug":"Java-Web","permalink":"http://yoursite.com/tags/Java-Web/"},{"name":"servlet","slug":"servlet","permalink":"http://yoursite.com/tags/servlet/"}]},{"title":"使用Java获取JDBC元数据对象","slug":"JDBC获取元数据","date":"2018-09-21T13:20:10.000Z","updated":"2019-12-15T14:15:00.906Z","comments":true,"path":"2018/09/21/JDBC获取元数据/","link":"","permalink":"http://yoursite.com/2018/09/21/JDBC获取元数据/","excerpt":"","text":"前言今天遇到一个问题，有一个需求，需要先判断数据库表是否存在，不存在则创建。按照我的第一思路，写一个SQL语句查询数据库表是否存在，不存在就创建好了 如以下的：1234567// SHOW TABLES： 显示当前数据库中所有表的名称// SHOW TABLES FROM database_name; // 查询xx数据库下所有表名SHOW TABLES LIKE &apos;tablename&apos;;// 查询数据库所有表名： SELECT * FROM information_schema.tables WHERE table_schema =&apos;database_name&apos; AND table_name = &apos;tablename&apos;; 然后发现了一个方法，如下：123456789Class.forName(&quot;com.mysql.jdbc.Driver&quot;);Connection conn = DriverManager.getConnection(url, user, password);DatabaseMetaData databaseMetaData = conn.getMetaData();ResultSet resultSet = databaseMetaData.getTables(null, null, &quot;tablename&quot;, null);if (resultSet.next()) &#123; System.out.println(&quot;table exist!&quot;);&#125; else &#123; System.out.println(&quot;table not exist&quot;);&#125; 不使用SQL就可以查询到，那不是更方便吗。于是我就去了解了一下DatabaseMetaData这个类。 DatabaseMetaData接口获取JDBC元数据什么是元数据是描述存储在数据源中的数据的数据，是关于数据的数据，其中有两种类型的数据，关于数据结构的设计和规范的结构元数据以及关于资源和自身实例信息的识别的描述性元数据 元数据通常包括数据库中每个表的名称，大小和行数，以及每个表中的列，它们的数据类型，精度等。考虑到这一点，让我们从教程开始，了解如何从任何数据源获取元数据。 获取方式首先， 获取DatabaseMetaData的方法其实在上面的方法中已经给出了，一行代码即可1DatabaseMetaData databaseMetaData = conn.getMetaData(); 常用方法12345678910getTables() // 得到指定参数的表信息参数说明 getColumns() // 得到指定表的列信息getPrimaryKeys() // 获取表的主键信息getExportedKeys() // 获取表的外键信息getTypeInfo() // 获取此数据库支持的所有数据类型的描述// 参数说明：catalog： 类别名称，一般为空 schema ： 数据库名 tableName ：表名columnName ：列名 其他方法例：123456789101112DatabaseMetaData databaseMetaData = conn.getMetaData();System.out.println(&quot;数据库已知的用户: &quot; + databaseMetaData.getUserName());System.out.println(&quot;数据库URL: &quot; + databaseMetaData.getURL());System.out.println(&quot;是否允许只读:&quot; + databaseMetaData.isReadOnly());System.out.println(&quot;数据库的产品名称:&quot; + databaseMetaData.getDatabaseProductName());System.out.println(&quot;数据库的版本:&quot; + databaseMetaData.getDatabaseProductVersion());System.out.println(&quot;驱动程序的名称:&quot; + databaseMetaData.getDriverName());System.out.println(&quot;驱动程序的版本:&quot; + databaseMetaData.getDriverVersion());System.out.println(&quot;数据库的系统函数的逗号分隔列表: &quot; + databaseMetaData.getSystemFunctions());System.out.println(&quot;数据库的时间和日期函数的逗号分隔列表: &quot; + databaseMetaData.getTimeDateFunctions());System.out.println(&quot;数据库的字符串函数的逗号分隔列表: &quot; + databaseMetaData.getStringFunctions());System.out.println(&quot;数据库供应商用于 &apos;schema&apos; 的首选术语: &quot; + databaseMetaData.getSchemaTerm()); 显示： 总结关于这个接口，我在开发过程中并没有真正用到过。不过这个接口的强大是毋庸置疑的，很多数据都可以通过其获取。但是据说对于JDBC元数据的操作非常消耗性能，应尽量避免使用。当然咯，具体的事情具体再看吧 参考： Interface DatabaseMetaData JDBC Tutorial: Extracting Database Metadata via JDBC Driver JDBC DatabaseMetaData Example JDBC元数据操作（一）– DatabaseMetaData接口详解","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://yoursite.com/categories/技术开发/"},{"name":"Java","slug":"技术开发/Java","permalink":"http://yoursite.com/categories/技术开发/Java/"},{"name":"JDBC","slug":"技术开发/Java/JDBC","permalink":"http://yoursite.com/categories/技术开发/Java/JDBC/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://yoursite.com/tags/JAVA/"},{"name":"JDBC","slug":"JDBC","permalink":"http://yoursite.com/tags/JDBC/"},{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"}]},{"title":"swing中添加右键菜单","slug":"swing右键添加菜单","date":"2018-09-15T13:52:30.000Z","updated":"2019-12-16T13:49:43.496Z","comments":true,"path":"2018/09/15/swing右键添加菜单/","link":"","permalink":"http://yoursite.com/2018/09/15/swing右键添加菜单/","excerpt":"","text":"右键菜单是一直是一个非常实用的功能,在此，乘着现在还有一些印象做基础,存一个在swing中添加右键菜单功能的小例子，方便以后备用。 ps： 连Oracle官方都不推荐实用swing,而改用JavaFX了,基本上在官方的各种swing组件说明中都能看到一句 If you are interested in using JavaFX to create your GUI, see Working With Layouts in JavaFX. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137import java.awt.Color;import java.awt.datatransfer.Clipboard;import java.awt.datatransfer.DataFlavor;import java.awt.datatransfer.Transferable;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.InputEvent;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import javax.swing.BorderFactory;import javax.swing.JFrame;import javax.swing.JMenuItem;import javax.swing.JPopupMenu;import javax.swing.JTextArea;import javax.swing.KeyStroke;import javax.swing.WindowConstants;public class Test02 &#123; @SuppressWarnings(\"serial\") class TextAreaMenu extends JTextArea&#123; // 菜单增加选项,复制,粘贴,剪切 JMenuItem copy = null, paste = null, cut = null; public TextAreaMenu()&#123; // 给当前组件添加右键菜单组件 JPopupMenu menu = new JPopupMenu(); menu.add(copy = new JMenuItem(\"复制\")); menu.add(paste = new JMenuItem(\"粘贴\")); menu.add(cut = new JMenuItem(\"剪切\")); // 设置键盘操作 copy.setAccelerator(KeyStroke.getKeyStroke('C', InputEvent.CTRL_MASK)); paste.setAccelerator(KeyStroke.getKeyStroke('V', InputEvent.CTRL_MASK)); cut.setAccelerator(KeyStroke.getKeyStroke('X', InputEvent.CTRL_MASK)); // 设置边框增强显示效果 this.setBorder(BorderFactory.createLineBorder(Color.red)); this.addMouseListener(new MouseAdapter()&#123; // 当前组件的鼠标点击事件 @Override public void mouseClicked(MouseEvent e) &#123; // MouseEvent.BUTTON1: 左键点击 // MouseEvent.BUTTON2: 中间点击(滑轮) if(e.getButton() == MouseEvent.BUTTON3)&#123; // 设置右键点击事件,打开邮件菜单 menu.show(TextAreaMenu.this,e.getX(),e.getY()); // 设置选项是否可用 boolean isCanCopy = isCanCopy(); copy.setEnabled(isCanCopy); cut.setEnabled(isCanCopy); // 剪贴板是否存在数据 paste.setEnabled(isClipboardString()); &#125; &#125; &#125;); // 初始化选项事件 initEvent(); &#125; private void initEvent()&#123; copy.addActionListener(new ActionListener()&#123; @Override public void actionPerformed(ActionEvent e) &#123; System.out.println(\"点击了复制按钮\"); TextAreaMenu.this.copy(); &#125; &#125;); paste.addActionListener(new ActionListener()&#123; @Override public void actionPerformed(ActionEvent e) &#123; System.out.println(\"点击了粘贴按钮\"); TextAreaMenu.this.paste(); &#125; &#125;); cut.addActionListener(new ActionListener()&#123; @Override public void actionPerformed(ActionEvent e) &#123; System.out.println(\"点击了剪切按钮\"); TextAreaMenu.this.cut(); &#125; &#125;); &#125; /** * 当前文本组件是否可以复制 * true 具备 * false 不具备 * @return */ public boolean isCanCopy() &#123; // getSelectionStart() 返回选定文本的起始位置。如果是空文档，则返回 0；如果没有选定，则返回点值。 int start = this.getSelectionStart(); // getSelectionEnd() 返回选定文本的结束位置。如果文本为空，则返回 0；如果没有选择，则返回点值。 int end = this.getSelectionEnd(); return start != end; &#125; /** * 剪切板中是否有文本数据可供粘贴 * true 有文本数据 * false 无 * @return true为有文本数据 */ public boolean isClipboardString() &#123; boolean b = false; // 获取剪贴板对象 Clipboard clipboard = this.getToolkit().getSystemClipboard(); try &#123; // getContents(), 获取剪贴板对象中的数据对象,无则返回null Transferable content = clipboard.getContents(this); // getTransferData(), 获取数据对象中的值 if (content.getTransferData(DataFlavor.stringFlavor) instanceof String) &#123; b = true; &#125; &#125; catch (Exception e) &#123; return false; &#125; return b; &#125; &#125; public static void main(String[] args) &#123; JFrame jf = new JFrame(\"测试窗口\"); jf.setSize(600, 600); TextAreaMenu textAreaMenu = new Test02().new TextAreaMenu(); jf.setContentPane(textAreaMenu); jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); jf.setVisible(true); &#125;&#125; 显示:","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://yoursite.com/categories/技术开发/"},{"name":"Java","slug":"技术开发/Java","permalink":"http://yoursite.com/categories/技术开发/Java/"},{"name":"Java图形化","slug":"技术开发/Java/Java图形化","permalink":"http://yoursite.com/categories/技术开发/Java/Java图形化/"},{"name":"Swing","slug":"技术开发/Java/Java图形化/Swing","permalink":"http://yoursite.com/categories/技术开发/Java/Java图形化/Swing/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://yoursite.com/tags/JAVA/"},{"name":"SWING","slug":"SWING","permalink":"http://yoursite.com/tags/SWING/"}]},{"title":"Swing布局","slug":"swing布局","date":"2018-09-13T14:41:50.000Z","updated":"2019-12-16T13:49:23.909Z","comments":true,"path":"2018/09/13/swing布局/","link":"","permalink":"http://yoursite.com/2018/09/13/swing布局/","excerpt":"","text":"前言swing是Java中的一个gui库。现在已经很少看到有使用swing开发的项目了.我也一直没有真正的使用swing进行开发,只是在刚接触java时根据例子简单敲了一下。不过最近,公司正好有一个项目是以swing为基础进行二次开发的,作为一个几乎近似于刚接触swing的新手,在接下来的日子里简单记录一下学习swing的一些内容。以下,为swing中的关键,layout方面的内容。 BorderLayout一种非常简单常用的布局策略, 也是某些容器组件的默认布局管理器,即RootPaneContainer(JInternalFrame、JDialog、JFrame、JWindow),它将容器分为NORTH, SOUTH,CENTER，WEST，EAST五个区域, 每个区域最多只能有一个组件. East和West的组件在垂直方向上拉升，North和South的组件在水平方向上拉升,Center的组件可同时在水平和垂直方向上拉升，填满所有剩余空间. 使用方式： 1Container.add（component, BorderLayout.EAST）; 例： 12345678910111213141516171819 JFrame testFrame = new JFrame(); testFrame.setSize(600, 600); testFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); JPanel contentPane = new JPanel(); testFrame.setContentPane(contentPane); JButton button1 = new JButton(\"北\"); JButton button2 = new JButton(\"南\"); JButton button3 = new JButton(\"东\"); JButton button4 = new JButton(\"西\"); JButton button5 = new JButton(\"中央\"); testFrame.setLayout(new BorderLayout()); contentPane.add(button1, \"North\"); contentPane.add(button2, \"South\"); contentPane.add(button3, \"East\"); contentPane.add(button4, \"West\"); contentPane.add(button5, \"Center\"); testFrame.setVisible(true);// 具体可通过鼠标拖动窗体伸缩查看效果 显示: 若不指定第二个参数,则默认在BorderLayout.CENTER区域显示如果对同一个区域添加了多个组件，那么只显示最后添加的组件。 FlowLayout该布局是从左到右或从右到左方式排列，一行放不下就换到另外一行。因此它一行能放置多少组件取决于窗口的宽度。如果剩余空间小于组件，那么组件将在新行显示。注意它默认组件是居中对齐，可以通过FlowLayout(intalign)函数来指定对齐方式。是JPanel的默认的布局管理器 12345678910111213141516171819202122232425262728293031323334353637import java.awt.FlowLayout;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JPanel;public class Test01 &#123; public static void main(String[] args) &#123; JFrame testFrame = new JFrame(); testFrame.setSize(600, 600); testFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); JPanel panel = new JPanel(); testFrame.setContentPane(panel); FlowLayout layout = new FlowLayout(); testFrame.setLayout(layout); JButton button1 = new JButton(\"button1\"); JButton button2 = new JButton(\"button2\"); JButton button3 = new JButton(\"button3\"); JButton button4 = new JButton(\"button4\"); JButton button5 = new JButton(\"button5\"); panel.add(button1); panel.add(button2); panel.add(button3); panel.add(button4); panel.add(button5); testFrame.setVisible(true); &#125;&#125;// 具体可通过鼠标拖动窗体伸缩查看效果注: // 设置组件之间的距离 setVgap(int vgap) 设置组件之间以及组件与 Container 的边之间的垂直间隙。 setHgap(int hgap) 设置组件之间以及组件与 Container 的边之间的水平间隙。 GridLayout网格式的布局,将整个容器划分成一定的行和一定的列，可以指定控件放在某行某列上,窗口改变的时候，组件的大小也会随之改变。每个单元格的大小一样，而且放置组件时，只能从左到右、由上到下的顺序填充，用户不能任意放置组件，比较的“死板”。 简单一点来说, GridLayout就类似于一个标准的表格,但是最麻烦的是,这种布局不能跨行和跨列,所以感觉应该很少能用到这个布局方式。虽然可以在子组件中设置不同的布局方式进行搭配,使展示效果达到跨行跨列的效果,但是这已经与GridLayout没什么关系了 123456789101112131415161718192021222324252627282930GridLayout有三个构造方法GridLayout() // 创建具有默认值的网格布局，即每个组件占据一行一列。GridLayout(int rows, int cols) // 创建具有指定行数和列数的网格布局。GridLayout(int rows, int cols, int hgap, int vgap) // 创建具有指定行数和列数的网格布局。// 以GridLayout(int rows, int cols)为例： public static void main(String[] args) &#123; JFrame testFrame = new JFrame(); testFrame.setSize(600, 600); testFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); JPanel panel = new JPanel(); testFrame.setContentPane(panel); GridLayout layout = new GridLayout(3,2); testFrame.setLayout(layout); JButton button1 = new JButton(\"button1\"); JButton button2 = new JButton(\"button2\"); JButton button3 = new JButton(\"button3\"); JButton button4 = new JButton(\"button4\"); JButton button5 = new JButton(\"button5\"); JButton button6 = new JButton(\"button6\"); panel.add(button1); panel.add(button2); panel.add(button3); panel.add(button4); panel.add(button5); panel.add(button6); testFrame.setVisible(true); &#125; 显示： GridBagLayout上面说GridLayout无法跨行和跨列,那么使用GridBagLayout就可以达到跨行跨列的效果,我想,在正式环境中应该使用GridBagLayout的情况反而更多。 GridBagLayout比较复杂,需要通过GridBagConstraints类进行约束。 GridBagConstraints常用方法： 12345678910111213141516fill ：指定填充方向，可以向水平，垂直或水平+垂直方向充满整个容器gridx(), gridy() 指定组件在容器单元格内的行索引与列索引，如最左上的那个单元格式，其gridx为0，gridy为0。gridwidth(), gridheight() ：指定单元格的跨行与跨列数insets ：指定组件的外部填充，相当于单元格间距weightx, weighty ：指定容器大小变动时，向x或y方向的伸缩率。Anchor：当组件的大小小于可用显示区域时使用，指定组件在显示区域中的位置。 请见下图： ------------------------------------------------- |FIRST_LINE_START PAGE_START FIRST_LINE_END| | | | | |LINE_START CENTER LINE_END| | | | | |LAST_LINE_START PAGE_END LAST_LINE_END| ------------------------------------------------- 以下给出一个GridBagLayout的例子： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091import java.awt.Button;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import javax.swing.JFrame;public class GridBagLayoutTest &#123; // 新建了一块场地 private JFrame f = new JFrame(\"小区\"); // 聘请了一位资深的园艺设计师 private GridBagLayout gb = new GridBagLayout(); // 要设计，就要有一张空白的设计图纸 private GridBagConstraints gbc = new GridBagConstraints(); // 订购了十棵树 private Button[] bs = new Button[11]; public void init() &#123; f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); f.setSize(1000, 1000); // 指定设计师要设计的地盘 f.setLayout(gb); // 把十棵树先准备好 for (int i = 0; i &lt; bs.length; i++) &#123; bs[i] = new Button(\"树\" + i); &#125; // 启用组件横向、纵向上扩展的功能 gbc.fill = GridBagConstraints.BOTH; // 设置组件横向上扩展的比例，在一行上有多个组件时有用 gbc.weightx = 1; // 中第一棵树 addButton(bs[0]); // 中第二棵树 addButton(bs[1]); addButton(bs[2]); // 中的第四棵树是这一行的最后一棵树 gbc.gridwidth = GridBagConstraints.REMAINDER; addButton(bs[3]); // 中的第五课树会从第二行开始,这棵树也是该行最后一棵树，增加纵向长度 gbc.ipady = 20; addButton(bs[4]); // 从第三行开始种，横向占了两棵树的位置 gbc.ipady = 0; gbc.gridwidth = 2; addButton(bs[5]); // 第三行的最后一棵树，自然横向占两棵树的位置 gbc.gridwidth = GridBagConstraints.REMAINDER; addButton(bs[6]); // 第四行第一棵树恢复横向占一棵树的位置 gbc.gridwidth = 1; // 纵向跨越两个网格 gbc.gridheight = 2; addButton(bs[7]); // 种第四行最后一棵树，自然横向跨越三棵树的位置 gbc.gridwidth = GridBagConstraints.REMAINDER; // 恢复纵向跨越一个网格 gbc.gridheight = 1; addButton(bs[8]); // 接在第八棵树后面，但在第九棵树的下一行，真正实现了让第八棵树纵跨两行 addButton(bs[9]); // 第十一课树会出现在第五行，因为没有给gridwidth重新赋值，它就是第五行最后一棵树 // 将其设为纵向扩展，由于第十一棵树要纵向扩展，它会在上下两个方向不断膨胀，结果把它上面的组件都挤到 // 最上面去了 gbc.weighty = 1; addButton(bs[10]); // 使得场地的大小刚好容得下目前已种的树// f.pack(); // 把设计好的场地展现出来 f.setVisible(true); &#125; // 将当前的树如何植入小区，植入小区哪边的方法 private void addButton(Button button) &#123; // 先要确保设计师手上有设计图纸和材料 gb.setConstraints(button, gbc); // 将树植入 f.add(button); &#125; public static void main(String[] args) &#123; new GridBagLayoutTest().init(); &#125;&#125; // 以上这个例子是我在网上找资料的时候在一个论坛上看到的,感觉可以很好说明GridBagLayout.具体链接地址在哪里忘记了,惭愧。不过感谢那位仁兄对我的帮助 CardLayoutCardLayout 对象是容器的布局管理器。它将容器中的每个组件看作一张卡片。一次只能看到一张卡片，容器则充当卡片的堆栈。当容器第一次显示时，第一个添加到 CardLayout 对象的组件为可见组件 CardLayout的布局感觉有点像之前我记单词时用的单词卡一样,还有在有些APP中点击切切换页面可能也会使用到CardLayout. 其实个人感觉来说,这个布局就像是常用的Tab页,如JTabbedPane,去除头部标题那一部分的效果 GroupLayoutGroupLayout是一个非常复杂的Layout,此布局有一个轴的概念. 水平轴与垂直抽. 这个布局我很少接触,贴一些引用,待需要用到时再查找 JavaSwing_1.5: GroupLayout（分组布局） How to use GroupLayout GroupLayout API 例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465public static void main(String[] args) &#123; JFrame jf = new JFrame(\"测试窗口\"); jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); // 创建内容面板容器 JPanel panel = new JPanel(); // 创建分组布局，并关联容器 GroupLayout layout = new GroupLayout(panel); // 设置容器的布局 panel.setLayout(layout); // 创建组件 JButton btn01 = new JButton(\"Button01\"); JButton btn02 = new JButton(\"Button02\"); JButton btn03 = new JButton(\"Button03\"); JButton btn04 = new JButton(\"Button04\"); JButton btn05 = new JButton(\"Button05\"); // 自动创建组件之间的间隙 layout.setAutoCreateGaps(true); // 自动创建容器与触到容器边框的组件之间的间隙 layout.setAutoCreateContainerGaps(true); /* * 水平组（仅确定 X 轴方向的坐标/排列方式） * * 水平串行: 水平排列（左右排列） * 水平并行: 垂直排列（上下排列） */ // 水平并行（上下） btn01 和 btn02 GroupLayout.ParallelGroup hParalGroup01 = layout.createParallelGroup().addComponent(btn01).addComponent(btn02); // 水平并行（上下）btn03 和 btn04 GroupLayout.ParallelGroup hParalGroup02 = layout.createParallelGroup().addComponent(btn03).addComponent(btn04); // 水平串行（左右）hParalGroup01 和 hParalGroup02 GroupLayout.SequentialGroup hSeqGroup = layout.createSequentialGroup().addGroup(hParalGroup01).addGroup(hParalGroup02); // 水平并行（上下）hSeqGroup 和 btn05 GroupLayout.ParallelGroup hParalGroup = layout.createParallelGroup().addGroup(hSeqGroup).addComponent(btn05, GroupLayout.Alignment.CENTER); layout.setHorizontalGroup(hParalGroup); // 指定布局的 水平组（水平坐标） /* * 垂直组（仅确定 Y 轴方向的坐标/排列方式） * * 垂直串行: 垂直排列（上下排列） * 垂直并行: 水平排列（左右排列） */ // 垂直并行（左右）btn01 和 btn03 GroupLayout.ParallelGroup vParalGroup01 = layout.createParallelGroup().addComponent(btn01).addComponent(btn03); // 垂直并行（左右）btn02 和 btn04 GroupLayout.ParallelGroup vParalGroup02 = layout.createParallelGroup().addComponent(btn02).addComponent(btn04); // 垂直串行（上下）vParalGroup01, vParalGroup02 和 btn05 GroupLayout.SequentialGroup vSeqGroup = layout.createSequentialGroup().addGroup(vParalGroup01).addGroup(vParalGroup02).addComponent(btn05); layout.setVerticalGroup(vSeqGroup); // 指定布局的 垂直组（垂直坐标） jf.setContentPane(panel); jf.pack(); jf.setLocationRelativeTo(null); jf.setVisible(true);&#125; BoxLayoutBoxLayout也是一个比较强大的布局管理器, 它既可以设置横向排列页可以设置纵向排列。 主要排列方式包括 1234567X_AXIS：从左到右水平布置组件。Y_AXIS：从上到下垂直布置组件。LINE_AXIS：根据容器的ComponentOrientation属性，按照行的方式排列，可以从左到右也可以从右到左PAGE_AXIS：根据容器的ComponentOrientation,以页面的方式进行排列 关于BoxLayout通常与Box容器进行搭配使用，Box可以创建一些影响布局的组件提高显示效果。glue、struts 和 rigid 区域。 比如有时候我们希望不同的组件之间留一些间隔，空白区域，我们就可以在不同的组件之间利用Box创建一些隐藏不可见的组件。 Box类常用方法： 1234567createHorizontalBox() // 创建一个从左到右显示其组件的 Box。createVerticalBox() // 创建一个从上到下显示其组件的 Box。createHorizontalGlue() // 创建一个横向 glue 组件。createVerticalGlue() // 创建一个纵向 glue 组件。 关于Boxlayout在网上看到很多写的很好的博客，这里抛砖引入，使用其中一个例子： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206package boxlayout.test;import java.awt.Component;import java.awt.Dimension;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import javax.swing.BorderFactory;import javax.swing.Box;import javax.swing.BoxLayout;import javax.swing.DefaultListModel;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JList;import javax.swing.JPanel;import javax.swing.JLabel;import javax.swing.JScrollPane;import javax.swing.JTable;import javax.swing.ListSelectionModel;import javax.swing.table.DefaultTableModel;public class BoxLayoutTest &#123; static JPanel topPanel; static JPanel bottomPanel; static JPanel middlePanel; static void createTopPanel() &#123; topPanel = new JPanel(); String[] columnName = &#123; \"姓名\", \"性别\", \"单位\", \"参加项目\", \"备注\" &#125;; String[][] rowData = &#123; &#123; \"张三\", \"男\", \"计算机系\", \"100 米 ,200 米\", \"\" &#125;, &#123; \"李四\", \"男\", \"化学系\", \"100 米,铅球\", \"\" &#125;, &#125;; // 创建表格 JTable table = new JTable(new DefaultTableModel(rowData, columnName)); // 创建包含表格的滚动窗格 JScrollPane scrollPane = new JScrollPane(table); scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS); // 定义 topPanel 的布局为 BoxLayout,BoxLayout 为垂直排列 topPanel.setLayout(new BoxLayout(topPanel, BoxLayout.Y_AXIS)); // 先加入一个不可见的 Strut,从而使 topPanel 对顶部留出一定的空间 topPanel.add(Box.createVerticalStrut(10)); // 加入包含表格的滚动窗格 topPanel.add(scrollPane); // 再加入一个不可见的 Strut,从而使 topPanel 和 middlePanel 之间留出一定的空间 topPanel.add(Box.createVerticalStrut(10)); &#125; @SuppressWarnings(&#123; \"rawtypes\", \"unchecked\" &#125;) static void createMiddlePanel() &#123; // 创建 middlePanel middlePanel = new JPanel(); // 采用水平布局 middlePanel.setLayout(new BoxLayout(middlePanel, BoxLayout.X_AXIS)); // 创建标签运动会项目 JLabel sourceLabel = new JLabel(\"运动会项目：\"); sourceLabel.setAlignmentY(Component.TOP_ALIGNMENT); sourceLabel.setBorder(BorderFactory.createEmptyBorder(4, 5, 0, 5)); // 创建列表运动会项目 DefaultListModel listModel = new DefaultListModel(); listModel.addElement(\"100 米\"); listModel.addElement(\"200 米\"); listModel.addElement(\"400 米\"); listModel.addElement(\"跳远\"); listModel.addElement(\"跳高\"); listModel.addElement(\"铅球\"); JList sourceList = new JList(listModel); sourceList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION); sourceList.setVisibleRowCount(5); JScrollPane sourceListScroller = new JScrollPane(sourceList); sourceListScroller.setPreferredSize(new Dimension(120, 80)); sourceListScroller.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS); sourceListScroller.setAlignmentY(Component.TOP_ALIGNMENT); // 创建最左边的 Panel JPanel sourceListPanel = new JPanel(); // 最左边的 Panel 采用水平布局 sourceListPanel.setLayout(new BoxLayout(sourceListPanel, BoxLayout.X_AXIS)); // 加入标签到最左边的 Panel sourceListPanel.add(sourceLabel); // 加入列表运动会项目到最左边的 Panel sourceListPanel.add(sourceListScroller); sourceListPanel.setAlignmentY(Component.TOP_ALIGNMENT); sourceListPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 30)); // 将最左边的 Panel 加入到 middlePanel middlePanel.add(sourceListPanel); // 定义中间的两个按钮 JButton toTargetButton = new JButton(\"&gt;&gt;\"); JButton toSourceButton = new JButton(\"&lt;&lt;\"); // 定义中间的 Panel JPanel buttonPanel = new JPanel(); // 中间的 Panel 采用水平布局 buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.Y_AXIS)); // 将按钮 &gt;&gt; 加入到中间的 Panel buttonPanel.add(toTargetButton); // 两个按钮之间加入一个不可见的 rigidArea buttonPanel.add(Box.createRigidArea(new Dimension(15, 15))); // 将按钮 &lt;&lt; 加入到中间的 Panel buttonPanel.add(toSourceButton); buttonPanel.setAlignmentY(Component.TOP_ALIGNMENT); buttonPanel.setBorder(BorderFactory.createEmptyBorder(15, 5, 15, 5)); // 将中间的 Panel 加入到 middlePanel middlePanel.add(buttonPanel); // 创建标签查询项目 JLabel targetLabel = new JLabel(\"查询项目：\"); targetLabel.setAlignmentY(Component.TOP_ALIGNMENT); targetLabel.setBorder(BorderFactory.createEmptyBorder(4, 5, 0, 5)); // 创建列表查询项目 DefaultListModel targetListModel = new DefaultListModel(); targetListModel.addElement(\"100 米\"); JList targetList = new JList(targetListModel); targetList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION); targetList.setVisibleRowCount(5); JScrollPane targetListScroller = new JScrollPane(targetList); targetListScroller.setPreferredSize(new Dimension(120, 80)); targetListScroller.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS); targetListScroller.setAlignmentY(Component.TOP_ALIGNMENT); // 创建最右边的 Panel JPanel targetListPanel = new JPanel(); // 设置最右边的 Panel 为水平布局 targetListPanel.setLayout(new BoxLayout(targetListPanel, BoxLayout.X_AXIS)); // 将标签查询项目加到最右边的 Panel targetListPanel.add(targetLabel); // 将列表查询项目加到最右边的 Panel targetListPanel.add(targetListScroller); targetListPanel.setAlignmentY(Component.TOP_ALIGNMENT); targetListPanel.setBorder(BorderFactory.createEmptyBorder(0, 30, 0, 0)); // 最后将最右边的 Panel 加入到 middlePanel middlePanel.add(targetListPanel); &#125; static void createBottomPanel() &#123; // 创建查询按钮 JButton actionButton = new JButton(\"查询\"); // 创建退出按钮 JButton closeButton = new JButton(\"退出\"); // 创建 bottomPanel bottomPanel = new JPanel(); // 设置 bottomPanel 为垂直布局 bottomPanel.setLayout(new BoxLayout(bottomPanel, BoxLayout.Y_AXIS)); // 创建包含两个按钮的 buttonPanel JPanel buttonPanel = new JPanel(); // 设置 bottomPanel 为水平布局 buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.X_AXIS)); // 将查询按钮加入到 buttonPanel buttonPanel.add(actionButton); // 加入一个 glue, glue 会挤占两个按钮之间的空间 buttonPanel.add(Box.createHorizontalGlue()); // 将退出按钮加入到 buttonPanel buttonPanel.add(closeButton); // 加入一个 Strut,从而使 bottomPanel 和 middlePanel 上下之间留出距离 bottomPanel.add(Box.createVerticalStrut(10)); // 加入 buttonPanel bottomPanel.add(buttonPanel); // 加入一个 Strut,从而使 bottomPanel 和底部之间留出距离 bottomPanel.add(Box.createVerticalStrut(10)); &#125; public static void main(String[] args) &#123; // 创建 topPanel createTopPanel(); // 创建 middlePanel createMiddlePanel(); // 创建 bottomPanel createBottomPanel(); // 创建包含 topPanel,middlePanel 和 bottomPanel 的 panelContainer JPanel panelContainer = new JPanel(); // panelContainer 的布局为 GridBagLayout panelContainer.setLayout(new GridBagLayout()); GridBagConstraints c1 = new GridBagConstraints(); c1.gridx = 0; c1.gridy = 0; c1.weightx = 1.0; c1.weighty = 1.0; c1.fill = GridBagConstraints.BOTH; // 加入 topPanel panelContainer.add(topPanel, c1); GridBagConstraints c2 = new GridBagConstraints(); c2.gridx = 0; c2.gridy = 1; c2.weightx = 1.0; c2.weighty = 0; c2.fill = GridBagConstraints.HORIZONTAL; // 加入 middlePanel panelContainer.add(middlePanel, c2); GridBagConstraints c3 = new GridBagConstraints(); c3.gridx = 0; c3.gridy = 2; c3.weightx = 1.0; c3.weighty = 0; c3.fill = GridBagConstraints.HORIZONTAL; // 加入 bottomPanel panelContainer.add(bottomPanel, c3); // 创建窗体 JFrame frame = new JFrame(\"Boxlayout 演示\"); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); panelContainer.setOpaque(true); frame.setSize(new Dimension(480, 320)); frame.setContentPane(panelContainer); frame.setVisible(true); &#125;&#125; 参考： 运用 BoxLayout 进行 Swing 控件布局 Swing框式布局（BoxLayout，Box）应用详解 TableLayoutTableLayout不是JDK自带的布局管理器，使用TableLayout需要首先引入它的jar包， 如果是maven项目，可以在maven中央仓库找到这个jar包 TabLayout API TableLayout官方使用说明 如果有需要还是去官方文档去查看好了，里面有很多小demo可供参考。 对于官方文档中，行和列的大小设置，在此添加一点说明。 Tablelayout设定行和列，需要先定义一个二维数组，举例如下： 123double size [] [] = &#123;&#123;100, 0.50,0.20，TableLayout.FILL，200，TableLayout.FILL&#125;， &#123;TableLayout.FILL&#125;; 其中size[0]设置的时列的宽度，size[1]设置的时列的高度。在宽度中有几个概念需要说明： 名称 含义 总宽度 顾名思义，即容器的总宽度 绝对宽度 分配绝对像素大小的所有列的宽度成为绝对宽度 可缩放宽度 可缩放宽度=总宽度-绝对宽度 绝对列 使用绝对宽度指定的列是绝对列 可伸缩列 使用百分比指定的列称为可伸缩列 填充列 使用TableLayout.FILL指定 首选列 使用TableLayout.PREFERRED指定 关于宽度的分配原则为： 先将总宽度分配给绝对列和首选列，然后将剩余宽度（可伸缩宽度）分配给可伸缩列，如果可伸缩列的总和小于100％，则会留下一些可扩展的宽度。然后，在所有填充列中均等地划分该可缩放宽度 还是照着上面的例子来看，上面使用了一个二维数组size[][]来定义当前容器的列。 第0列： 100px (绝对宽度) 第1列： (500-100-200)*0.5 = 100px; 第2列： (500-100-200)*0.2 = 40px; 第3列： (500-100-200)*0.3/2 = 30px; 第4列： 200px(绝对宽度) 第5列： 同3列 30px; 关于这个宽度计算，我之前看文档的时候被绕了一段事件才搞明白。写在这里以作参考 总结关于swing的布局策略，我的看法是，没有最好的layout，只有最适合当前业务场景的。能对不同的情况灵活选择，才是最好的。以上对一些常用的布局管理器进行了一些小小的总结，很多都是在网上查找资料是遇到的，我算是抛砖引玉了。当然，还有一些布局管理器没有说到，如：GridLayout，SpringLayout.等以后需要用到了再来查看吧。 另外留下SpringLayout的一些资源已备参考： SpringLayout 管理器 How to use SpringLayout SpringLayout API 参考： Java-Swing常用布局管理器 官方使用文档","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://yoursite.com/categories/技术开发/"},{"name":"Java","slug":"技术开发/Java","permalink":"http://yoursite.com/categories/技术开发/Java/"},{"name":"Java图形化","slug":"技术开发/Java/Java图形化","permalink":"http://yoursite.com/categories/技术开发/Java/Java图形化/"},{"name":"Swing","slug":"技术开发/Java/Java图形化/Swing","permalink":"http://yoursite.com/categories/技术开发/Java/Java图形化/Swing/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://yoursite.com/tags/JAVA/"},{"name":"SWING","slug":"SWING","permalink":"http://yoursite.com/tags/SWING/"}]},{"title":"Dream","slug":"Dream","date":"2018-08-28T14:43:35.000Z","updated":"2019-12-15T14:15:42.475Z","comments":true,"path":"2018/08/28/Dream/","link":"","permalink":"http://yoursite.com/2018/08/28/Dream/","excerpt":"","text":"I don’t know what that dream is that you have. I don’t care how disappointing it might have been, as you’ve been working toward that dream. That dream that you are holding in your mind that is possible. That some of you already know that is hard. It’s not easy. It’s hard changing your life. That in the process of working on your dreams, you’re going to encounter a lot of disappointment, a lot of failure, a lot of pain. The moments when you’re going to doubt yourselves,ask god“why, why this happening to me. I am just trying to take care of my children and my mother. Am I trying to steal or rob from anybody? How does this have happened to me?” For those of you that have experienced some hardships, don’t give up for your dream. There are right time on the way to have come, but they have not come to be seen, they have come to past. Uniqueness is not this wonderful as all tell it delusive. God like featuring in that. Only the special among us are will ever take in something that truly exists in all of us. It’s very important for you to believe that you are the one. Most people they raise their family, they earn their living and then they die. They stop growing. They stop working on themselves. They stop stretching. They stop pushing themselves. That a lot of people like to complain but they don’t want to do anything about their situation. And most people don’t work on their dreams. Why? One is because of the fear, the fear of failure. What if things don’t work out? And the fear of success, what if they do and I can’t handle it. These are not risk takers. You spent so much time with other people. You spent so much time channel. You get other people to like you. You know other people more than you know yourselves. You study them. You know about them. You want to hang out like them. You want to be just like them. And you know what? Even better so much time and man, you don’t know who you are. I challenge you should spend time by yourselves. It’s necessary that you get the losers out of your life if you want to live your dream. But people who are running toward their dreams, life has a special kind of meaning. When you become the right person, what you do is to start separating yourselves from other people. You begin to have your certain uniqueness. As long as you following other people, as long as you will be a copy cat. You will never ever be the best copy cat in the world. But you will be the best you could be. I challenge you could find your value. That everybody want to see it, that everybody want to join you, that everybody want to have a vision, it’s necessary to know that you are uncommon breed, it’s necessary you’re allowing yourselves with people who are trying to enter your business who are hungry, people who are unstoppable and unreasonable, people who are refusing to live life just as it is and who want more. The people who are living their dreams are fighting winners to attach themselves to .The people that are living their dreams are the people they know if it’s gonna happen, it’s up to them. If you want to be more successful, if you want to have and don’t stop and never to be bored, let them all to invest in you, to invest in you, to invest in you. Someone has the opinion that you do not have to become your reality, that you don’t have to go through life being a victim. Even though you face disappointment, you have to know within yourselves. Can I do it? Even no one sees it from me, I am gonna see it from myself. This is what I believe and I am willing to die for, too. No matter how bad it is or how bad it gets, I am going to make it. I want to represent an ideal, I want to represent possibilities. At some of you right now, you wanna be , you know I wanna go to the next level. I am gonna count so. I want to be an engineer, I want to be a doctor. Listen to me, you can get to that level, you can get to the level economically where you wanna be. And to use time you invest in mind, you are not reading books, I am telling you that all the books are the compasses. I am telling you to invest time. I am telling you to be alone. I am telling you to spend out and get to know yourselves. When you become who you are, when you become the person that you are created to be, design to be who you’re designed to be. When you become an individual, what you do is you to take yourselves and you start submarine yourselves underpinned. I am telling you to get to a place where people don’t like you or bother you anymore. Why? Cause you are not consort with people and make them happy. Because you try more, you try to invest your mind. But you still talk about your dream, you still talk about your goal, because we are not done that big, just taking footsteps. That you can make your parents proud, you can make your school proud, you can charge millions of people’s life. And the world will never be the same again, because you came this way. Don’t let anybody steal your dream. Have we face our rejections and we have a meeting and no one shows up? And somebody says you can count on me and they don’t come through. What if we have that kind of attitude we don’t possess. Nobody believes in you and you’ve lost again again and again. Your life has cut off, but you still looking at your grieve, revealing it every day and the singular step is not over. I tell I aware, you can live your dream! 转自 2014全球最佳演讲「梦想」演讲稿","categories":[{"name":"生活学习","slug":"生活学习","permalink":"http://yoursite.com/categories/生活学习/"},{"name":"英语","slug":"生活学习/英语","permalink":"http://yoursite.com/categories/生活学习/英语/"}],"tags":[{"name":"英语 - 生活","slug":"英语-生活","permalink":"http://yoursite.com/tags/英语-生活/"},{"name":"励志","slug":"励志","permalink":"http://yoursite.com/tags/励志/"}]},{"title":"使用iframe下载文件","slug":"使用iframe下载文件","date":"2018-03-08T13:35:18.000Z","updated":"2019-12-16T13:46:21.422Z","comments":true,"path":"2018/03/08/使用iframe下载文件/","link":"","permalink":"http://yoursite.com/2018/03/08/使用iframe下载文件/","excerpt":"","text":"使用iframe下载文件 记录在工作中遇到的一个文件下载问题，之前使用的是a标签的download属性进行操作 例： 1&lt;a href=\"/images/20180305.jpg\" download=\"1\"&gt; 其中a标签的href对应下载文件的路径，download对应的是下载下来的文件名称 但是download属性只支持 Firefox 和 Chrome，所以只能选择其他的方式解决。改成了使用iframe可以进行文件下载 例： 1234567891011// 定义html标签&lt;a href=\"#\" onclick=\"downloadPicture(url)\"&gt;imageName&lt;/a&gt;' // 在body中添加一个隐藏的iframe进行文件下载&lt;script type=\"text/javascript\"&gt; function downloadPicture(url)&#123; $(\"#temp_iframe\").remove(); $(\"body\").append(\"&lt;iframe id='temp_iframe' style='display:none'&gt;&lt;/iframe&gt;\"); document.getElementById('temp_iframe').src = contextPath+url); &#125;&lt;/script&gt; 之前在这里还遇到了一个坑，项目使用的是struts2基于注解的方式进行下载的，页面写完js下载之后每次下载都是一个xxx.html的文件，后来发现原因，在struts注解下载中要特别注意指定filename，以下贴一大概的样例： 1234567891011121314151617 /** * 文件下载 * * @return * @throws Exception */@Action(value = \"showWaterPicture\", results = &#123; @Result(name = SUCCESS, type = \"stream\", params = &#123; \"contentType\",\"application/image/jpeg\", \"inputName\", \"inputStream\", \"bufferSize\", \"4096\", \"contentDisposition\",\"attachment;filename=$&#123;fileName&#125;\", \"contentCharSet\", \"utf-8\" &#125;) &#125;)public String showWaterPicture() throws IOException &#123; // 相关业务逻辑...&#125;","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://yoursite.com/categories/技术开发/"},{"name":"Java","slug":"技术开发/Java","permalink":"http://yoursite.com/categories/技术开发/Java/"},{"name":"JavaWeb","slug":"技术开发/Java/JavaWeb","permalink":"http://yoursite.com/categories/技术开发/Java/JavaWeb/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"}]},{"title":"java8函数式编程","slug":"Java8函数式编程","date":"2018-02-27T15:06:04.000Z","updated":"2019-12-15T14:15:52.105Z","comments":true,"path":"2018/02/27/Java8函数式编程/","link":"","permalink":"http://yoursite.com/2018/02/27/Java8函数式编程/","excerpt":"","text":"FunctionalInterface注解 接口默认方法 Lambda表达式 方法引用 @FunctionalInterface注解Java8提供了函数式编程接口的概念。函数式接口：是只定义了单一抽象方法的接口，用作Lambda表达式的类型。如Runnable接口，就是一个典型的Functional Interface @FunctionalInterface public interface Runnable { public abstract void run(); } 理解FunctionalInterface（函数式接口）是学习Java8 Lambda表达式的关键所在。函数式接口能且仅有一个抽象方法，而不是只能有一个方法。 接口默认方法Java8之前版本接口只能包含抽象方法，Java8新增了接口的默认方法，接口也可以包含若干个实例方法。在Java8中，使用default关键字，可以在接口内定义实例方法，这个方法并非抽象方法，而是拥有特定逻辑的具体实例方法。 举个例子，鸟都会飞，定义接口Bird，包含一个默认方法fly() public interface Bird{ void eat(); default void fly() { System.out.println(&quot;bird can fly...&quot;); } } 定义一个Crow类实现接口Bird。 public class Crow implements Bird { @Override public void eat() { System.out.println(&quot;crow can eat&quot;); } } 测试： public class Test { public static void main(String[] args) { Crow crow = new Crow(); crow.fly(); crow.eat(); } } 输出结果： 具体的类里面不是必须重写默认方法，这一改进使得Java8拥有了类似多继承的能力 Lambda表达式Lambda表达式是函数式编程的核心。Lambda表达式即匿名函数，它是一段没有函数名的函数体，可以作为参数直接传递给相关的调用者。 还是拿Runnable为例： Runnable r = new Runnable() { public void run() { System.out.println(&quot;Hello World!&quot;); } }; new Thread(r).start(); 使用Lanbda表达式可以大大简化代码写法： new Thread(() -&gt; System.out.println(&quot;Hello World&quot;)).start(); 输出结果： Lambda表达式语法： 无参无返回值： () -&gt; { //..... }; 如： Runnable r = () -&gt; {} 无参有返回值： () -&gt; {return something}; // 定义接口 @FunctionalInterface public interface Bird { String eat(); } // Lambda表达式可写为： Bird bir = () -&gt; {return &quot;Hello World&quot;;}; 有参有返回值： (param1,param2..paramN) -&gt; {return something}; 如： // 定义接口 @FunctionalInterface public interface Bird { String eat(String str1,String str2); } Bird bird = (String apple,String orange) -&gt; {return &quot;吃饱了&quot;;}; 如： (int x, int y) -&gt; x + y (int x, int y) -&gt; {return x + y;} 当lambda表达式只包含一条语句时，甚至可以省略大括号{}。 param1 -&gt; statment 方法引用方法引用是Java8中提出的用来简化Lambda表达式的一种手段，它通过类名和方法名来定位一个静态方法或者实例方法。方法引用使用”::”定义，”::”的前半部分表示类名或者实例名，后半部分表示方法名称，如果是构造器函数，则使用new表示。 静态方法引用：ClassName::methodName List&lt;String&gt; strs = Arrays.asList(&quot;aa&quot;,&quot;bb&quot;,&quot;cc&quot;); strs.forEach(System.out::println); 实例方法引用：instanceRefence::methodName // 待更新...","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://yoursite.com/categories/技术开发/"},{"name":"Java","slug":"技术开发/Java","permalink":"http://yoursite.com/categories/技术开发/Java/"},{"name":"Java8","slug":"技术开发/Java/Java8","permalink":"http://yoursite.com/categories/技术开发/Java/Java8/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]}]}