<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JavaWeb开发学习笔记之Servlet（二） Servlet生命周期与配置信息]]></title>
    <url>%2F2018%2F11%2F19%2FServlet(%E4%BA%8C)%20Servlet%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%2F</url>
    <content type="text"><![CDATA[创建一个简单的Servlet类12345678910111213141516171819202122232425262728import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.http.HttpServlet;public class HelloServlet extends HttpServlet &#123; @Override public void init() throws ServletException &#123; System.out.println(&quot;init....&quot;); // Servlet初始化 &#125; @Override public void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; System.out.println(&quot;进入Service方法&quot;); // 实际进行业务逻辑处理的地方 &#125; @Override public void destroy() &#123; System.out.println(&quot;destroy....&quot;); // Servlet销毁 &#125;&#125; 在web.xml配置1234567891011&lt;servlet&gt; &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;cn.hel.util.HelloServlet&lt;/servlet-class&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;// &lt;servlet&gt;用于注册Servlet，包含了&lt;servlet-name&gt;和&lt;servlet-class&gt;两个子元素，分别用于设置servlet的名称以及servlet的类名。// &lt;servlet-mapping&gt;用于映射上面&lt;servlet&gt;中的对外访问路径，同样包含&lt;servlet-name&gt;和&lt;url-pattern&gt;两个元素，分别用于设置servlet的名称以及servlet的对外访问路径。 Servlet的生命周期关于Servlet的生命周期，上面的内容已经讲清楚了。 init()，Servlet初始化时调用，只执行一次 service(), 直接处理业务逻辑请求的方法 destroy(), Servlet生命周期结束时调用，进行销毁。只执行一次 创建Servlet对象的过程 当Servlet容器启动时，会首先读取web.xml配置文件的信息，构造指定的Servlet对象，创建ServletConfig对象，同时将ServletConfig对象作为参数来调用Servlet对象的init方法。 在Servlet容器启动后：客户首次向Servlet发出请求，Servlet容器会判断内存中是否存在指定的Servlet对象，如果没有则创建它，然后根据客户的请求创建HttpRequest、HttpResponse对象，从而调用Servlet 对象的service方法。 Servlet容器在启动时自动创建Servlet，这是由在web.xml文件中为Servlet设置的&lt;load-on-startup&gt;属性决定的。从中我们也能看到同一个类型的Servlet对象在Servlet容器中以单例的形式存在。web.xml配置如下： 12345&lt;servlet&gt; &lt;servlet-name&gt;Init&lt;/servlet-name&gt; &lt;servlet-class&gt;org.xl.servlet.InitServlet&lt;/servlet-class&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;&lt;/servlet&gt; 关于&lt;load-on-startup&gt;的含义是， 标记容器是否在启动的时候就加载这个servlet； 当是一个负数或者未指定时，则指示容器在该servlet被选择时才加载。 正数的值越小，启动该servlet的优先级越高 ServletConfigServletConfig主要用于加载Servlet的初始化参数,在一个web应用可以存在多个ServletConfig对象。 ServletConfig主要包含四个方法 String getServletName() – 获取当前Servlet在web.xml中配置的名字 String getInitParameter(String name) – 获取当前Servlet指定名称的初始化参数的值 Enumeration getInitParameterNames() – 获取当前Servlet所有初始化参数的名字组成的枚举 ServletContext getServletContext() – 获取代表当前web应用的ServletContext对象 ServletConfig获取基本配置信息在Servlet的配置文件中，可以使用一个或多个标签为servlet配置一些初始化参数。（配置在某个 servlet标签）当servlet配置了初始化参数后，web容器在创建servlet实例对象时，会自动将这些初始化参数 封装到ServletConfig对象中，并在调用servlet的init方法时，将ServletConfig对象传递给servlet,因此通过ServletConfig对象就可以得到当前servlet的初始化参数信息。 ServletConfig代表的是Servlet在web.xml中的配置信息,对应web.xml中的Servlet元素 12345678910111213141516171819202122&lt;servlet&gt; &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;cn.hel.util.HelloServlet&lt;/servlet-class&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;!--配置HelloServlet的初始化参数 --&gt; &lt;init-param&gt; &lt;param-name&gt;name&lt;/param-name&gt; &lt;param-value&gt;gacl&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;password&lt;/param-name&gt; &lt;param-value&gt;123&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;charset&lt;/param-name&gt; &lt;param-value&gt;UTF-8&lt;/param-value&gt; &lt;/init-param&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; 在HttpServlet中获取.123456789101112131415161718192021222324252627282930313233public class HelloServlet extends HttpServlet &#123; @Override public void init() throws ServletException &#123; &#125; @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; System.out.println(&quot;======进入Service方法========&quot;); ServletConfig config = this.getServletConfig(); System.out.println(&quot;ServletName: &quot;+config.getServletName()); //获取在web.xml中配置的初始化参数 String paramVal = config.getInitParameter(&quot;name&quot;);//获取指定的初始化参数 System.out.println(paramVal); //获取所有的初始化参数 Enumeration&lt;String&gt; e = config.getInitParameterNames(); while(e.hasMoreElements())&#123; String name = e.nextElement(); String value = config.getInitParameter(name); System.out.println(name + &quot;=&quot; + value); &#125; &#125; @Override public void destroy() &#123; System.out.println(&quot;destroy....&quot;); &#125;&#125; 输出： 我们如果是用IDE工具进行调试的话（此处我用的是Eclipse+Tomcat），其实可以看到我们获取的ServletConfig对象，本身都是一个org.apache.catalina.core.StandardWrapperFacade类对象，来源于Tomcat容器。针对这一点，在以后tomcat的笔记中再进行详细研究。 ServletContext对象ServletContext对象的定义ServletContext代表的是当前的web应用，是Servlet容器上下文环境对象。定义一组方法，servlet使用这些方法与其servlet容器进行通信。例如，获取文件的 MIME 类型、分发请求或写入日志文件。每个web应用都有且仅有一个ServletContext对象，这个对象在所有的Servlet都可以使用。 以下为ServletContext源码中对其的定义说明。 123456789101112131415161718192021/** * Defines a set of methods that a servlet uses to communicate with its * servlet container, for example, to get the MIME type of a file, dispatch * requests, or write to a log file. * * &lt;p&gt;There is one context per &quot;web application&quot; per Java Virtual Machine. (A * &quot;web application&quot; is a collection of servlets and content installed under a * specific subset of the server&apos;s URL namespace such as &lt;code&gt;/catalog&lt;/code&gt; * and possibly installed via a &lt;code&gt;.war&lt;/code&gt; file.) * * &lt;p&gt;In the case of a web * application marked &quot;distributed&quot; in its deployment descriptor, there will * be one context instance for each virtual machine. In this situation, the * context cannot be used as a location to share global information (because * the information won&apos;t be truly global). Use an external resource like * a database instead. * * &lt;p&gt;The &lt;code&gt;ServletContext&lt;/code&gt; object is contained within * the &#123;@link ServletConfig&#125; object, which the Web server provides the * servlet when the servlet is initialized. */ ServletContext对象的获取方式在Servlet中获取ServletContext对象可通过以下三种方式获得 this.getServletContext(); this.getServletConfig().getServletContext(); request.getSession().getServletContext(); 三种方式获取的ServletContext对象都为同一个。 Servlet的作用web容器启动时，它为每一个web程序都创建一个对应的ServletContext对象，它代表着当前的web应用，事实上SpringMVC封装的ApplicationContext及Struts2封装的ApplicationContext里面都保存着原本的ServletContext. ServletContext配置的参数，可以被同一web应用下的所有servlet共享， 也正因此，Servlet对象之间可以通过ServletContext对象进行通讯，ServletContext通常也被称为域对象。 总结ServletContext的作用： Web应用范围内存共享数据；访问web应用的静态资源； Servlet对应之间通过ServletContext对象实现通讯。 例，获取web.xml中配置的上下文初始化参数： 在web.xml配置12345&lt;!-- 配置context --&gt;&lt;context-param&gt; &lt;param-name&gt;username&lt;/param-name&gt; &lt;param-value&gt;zhangsan&lt;/param-value&gt;&lt;/context-param&gt; 在servlet中获取123ServletContext context = this.getServletContext();context.getInitParameter(&quot;username&quot;)// ServletContext中的getInitParameter()和getInitParameterNames()方法与ServletConfig中的用法一致 例，获取ServletContext的上下文属性12345ServletContext context =this.getServletContext();context.setAttribute(&quot;name&quot;,&quot;value&quot;);context.getAttribute(&quot;name&quot;); Enumberation p=application.getAttributeNames(); ServletContext的主要方法 属性相关，web应用范围内存共享数据 1234setAttribute(String name,Object obj): 添加属性getAttribute(String name): 获取属性，返回ObjectremoveAttribute(name): 删除属性： getAttributeNames(), 获取所有属性 加载资源文件，访问静态资源 getResource(String parh): 获取代表某个资源的url对象，其中，path必须是/开头，代表当前web应用程序的根目录 1234URL url = context.getResource(&quot;/WEB-INF/classes/jdbc.properties&quot;);//得到URL InputStream in_url = url.openStream();//直接得到流 Properties props1 = new Properties(); props1.load(in_url);//获取资源文件 getResoutceAsStream(String parh)，返回文件流。这个好处是可以使用相对于根目录的路径访问到web目录下的所有文件，而不必知道绝对路径。123InputStream in = context.getResourceAsStream(&quot;/WEB-INF/classes/jdbc.properties&quot;); Properties props = new Properties(); props.load(in); 请求转发与重定向请求转发能实现的主要原因是由于ServletContext的数据共享。 关于请求转发与重定向的模式说明，举例，一个人去银行办事，如果柜台的员工无法处理，她叫你等在这里，去叫经理过来处理，那么这就是请求转发， 重定向是，一个人去银行办事，如果柜台的员工无法处理，她说这个业务我们这个网点办理不了，建议去其他网点办理，然后你就去了另外一个网点办理业务，这就是重定向。 请求转发与重定向的区别 类别 请求转发 重定向 浏览器URL 原来的url 新的url 请求次数 1次 2次 跳转范围 只能请求项目中的资源 可以跳转到项目外 转发 只能请求项目中的资源 可以跳转到项目外 请求转发的实现方式12RequestDispatcher rd = this.getServletContext().getRequestDispatcher(urlPath);rd.forward(request, response); 重定向1response.sendRedirect(urlPath);]]></content>
      <categories>
        <category>Java</category>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Java Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaWeb开发学习笔记之Servlet（一） Servlet与Servlet容器的概念]]></title>
    <url>%2F2018%2F11%2F12%2FServlet(%E4%B8%80)Servlet%E4%B8%8EServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[Servlet的定义 Servlet是一种Java编写的后台服务程序, 主要功能是交互式地浏览和修改数据，生成动态Web内容，可以理解为http请求与数据库或其他程序之间的中间层。 要说清楚什么是Servlet还是得从Servlet容器开始说起。 Servlet容器Servlet容器（Servlet Container），也可以称为Servlet引擎。是web服务器或应用服务器的一部分。 Servlet本身是不能独立运行的，必须部署到Servlet容器中运行。 由Servlet容器实例化和调用servlet方法，Servlet容器在Servlet生命周期内包含和管理servlet。常见的servlet容器有tomcat, JBoss, Jetty, Web logic等。 我们平常的Servlet开发过程中,接收请求这项工作并不是直接由Servlet来工作的,Servlet并不直接与客户端打交道。真正负责这项工作的是servlet容器。接收请求,监听端口这些工作都是由servlet容器来操作完成的。 随便谷歌一个servlet的hello world教程，里面都会让你写一个servlet，但是从来不会在servlet中写什么监听8080端口的代码，servlet不会直接和客户端打交道！。 tomcat等Servlet容器才是与客户端直接打交道的家伙，它监听了端口，请求过来后，根据url等信息，确定要将请求交给哪个servlet去处理，然后调用那个servlet的service方法，service方法返回一个response对象，tomcat再把这个response返回给客户端。 说起来，Servlet与Servlet容器的关系有点像枪和子弹的关系，枪是为子弹而生，而子弹又让枪有了杀伤力。虽然它们是彼此依存的，但是又相互独立发展，这一切都是为了适应工业化生产的结果。从技术角度来说是为了解耦，通过标准化接口来相互协作。 Servlet的本质是一个接口其实不用把Servlet想象成一个非常复杂的东西，事实上,Servlet的本质就是一个接口, 接口是用来干嘛的，定义规范！所以我们也可以说，Servlet的本质是一规范， 甚至我们还可以说,J2EE的本质就是一种规范。 Servlet类结构图 以上图片来源Google Servlet最顶层的就是一个Servlet接口，它里面定义了5个方法 servlet接口定义的是一套处理网络请求的规范，所有实现servlet的类，都需要实现它那五个方法，其中最主要的是两个生命周期方法 init()和destroy()，还有一个处理请求的service()，也就是说，所有实现servlet接口的类，或者说，所有想要处理网络请求的类，都需要回答这三个问题： 你初始化时要做什么 你销毁时要做什么 你接受到请求时要做什么 这就是Java给的一种规范，就像阿西莫夫的机器人三大定律、行尸走肉里Rick的那三个问题一样，规范！ Servlet的工作原理图图一 图二 Servlet的工作模式 Web Client 向Servlet容器（Tomcat）发出Http请求 Servlet容器接收Web Client的请求 Servlet容器创建一个HttpRequest对象，将Web Client请求的信息封装到这个对象中。 Servlet容器创建一个HttpResponse对象 Servlet容器调用HttpServlet对象的service方法，把HttpRequest对象与HttpResponse对象作为参数传给HttpServlet对象。 HttpServlet调用HttpRequest对象的有关方法，获取Http请求信息。 HttpServlet调用HttpResponse对象的有关方法，生成响应数据。 Servlet容器把HttpServlet的响应结果传给Web Client。 以上。 参考与引用： 知乎：servlet的本质是什么，它是如何工作的 IBM developerWorks: Servlet工作原理解析——许令波 JavaSchool Servlet教程]]></content>
      <categories>
        <category>Java</category>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Java Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Java获取JDBC元数据对象]]></title>
    <url>%2F2018%2F09%2F21%2FJDBC%E8%8E%B7%E5%8F%96%E5%85%83%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[前言今天遇到一个问题，有一个需求，需要先判断数据库表是否存在，不存在则创建。按照我的第一思路，写一个SQL语句查询数据库表是否存在，不存在就创建好了 如以下的：1234567// SHOW TABLES： 显示当前数据库中所有表的名称// SHOW TABLES FROM database_name; // 查询xx数据库下所有表名SHOW TABLES LIKE &apos;tablename&apos;;// 查询数据库所有表名： SELECT * FROM information_schema.tables WHERE table_schema =&apos;database_name&apos; AND table_name = &apos;tablename&apos;; 然后发现了一个方法，如下：123456789Class.forName(&quot;com.mysql.jdbc.Driver&quot;);Connection conn = DriverManager.getConnection(url, user, password);DatabaseMetaData databaseMetaData = conn.getMetaData();ResultSet resultSet = databaseMetaData.getTables(null, null, &quot;tablename&quot;, null);if (resultSet.next()) &#123; System.out.println(&quot;table exist!&quot;);&#125; else &#123; System.out.println(&quot;table not exist&quot;);&#125; 不使用SQL就可以查询到，那不是更方便吗。于是我就去了解了一下DatabaseMetaData这个类。 DatabaseMetaData接口获取JDBC元数据什么是元数据是描述存储在数据源中的数据的数据，是关于数据的数据，其中有两种类型的数据，关于数据结构的设计和规范的结构元数据以及关于资源和自身实例信息的识别的描述性元数据 元数据通常包括数据库中每个表的名称，大小和行数，以及每个表中的列，它们的数据类型，精度等。考虑到这一点，让我们从教程开始，了解如何从任何数据源获取元数据。 获取方式首先， 获取DatabaseMetaData的方法其实在上面的方法中已经给出了，一行代码即可1DatabaseMetaData databaseMetaData = conn.getMetaData(); 常用方法12345678910getTables() // 得到指定参数的表信息参数说明 getColumns() // 得到指定表的列信息getPrimaryKeys() // 获取表的主键信息getExportedKeys() // 获取表的外键信息getTypeInfo() // 获取此数据库支持的所有数据类型的描述// 参数说明：catalog： 类别名称，一般为空 schema ： 数据库名 tableName ：表名columnName ：列名 其他方法例：123456789101112DatabaseMetaData databaseMetaData = conn.getMetaData();System.out.println(&quot;数据库已知的用户: &quot; + databaseMetaData.getUserName());System.out.println(&quot;数据库URL: &quot; + databaseMetaData.getURL());System.out.println(&quot;是否允许只读:&quot; + databaseMetaData.isReadOnly());System.out.println(&quot;数据库的产品名称:&quot; + databaseMetaData.getDatabaseProductName());System.out.println(&quot;数据库的版本:&quot; + databaseMetaData.getDatabaseProductVersion());System.out.println(&quot;驱动程序的名称:&quot; + databaseMetaData.getDriverName());System.out.println(&quot;驱动程序的版本:&quot; + databaseMetaData.getDriverVersion());System.out.println(&quot;数据库的系统函数的逗号分隔列表: &quot; + databaseMetaData.getSystemFunctions());System.out.println(&quot;数据库的时间和日期函数的逗号分隔列表: &quot; + databaseMetaData.getTimeDateFunctions());System.out.println(&quot;数据库的字符串函数的逗号分隔列表: &quot; + databaseMetaData.getStringFunctions());System.out.println(&quot;数据库供应商用于 &apos;schema&apos; 的首选术语: &quot; + databaseMetaData.getSchemaTerm()); 显示： 总结关于这个接口，我在开发过程中并没有真正用到过。不过这个接口的强大是毋庸置疑的，很多数据都可以通过其获取。但是据说对于JDBC元数据的操作非常消耗性能，应尽量避免使用。当然咯，具体的事情具体再看吧 参考： Interface DatabaseMetaData JDBC Tutorial: Extracting Database Metadata via JDBC Driver JDBC DatabaseMetaData Example JDBC元数据操作（一）– DatabaseMetaData接口详解]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[swing中添加右键菜单]]></title>
    <url>%2F2018%2F09%2F15%2Fswing%E5%8F%B3%E9%94%AE%E6%B7%BB%E5%8A%A0%E8%8F%9C%E5%8D%95%2F</url>
    <content type="text"><![CDATA[右键菜单是一直是一个非常实用的功能,在此，乘着现在还有一些印象做基础,存一个在swing中添加右键菜单功能的小例子，方便以后备用。 ps： 连Oracle官方都不推荐实用swing,而改用JavaFX了,基本上在官方的各种swing组件说明中都能看到一句 If you are interested in using JavaFX to create your GUI, see Working With Layouts in JavaFX. import java.awt.Color; import java.awt.datatransfer.Clipboard; import java.awt.datatransfer.DataFlavor; import java.awt.datatransfer.Transferable; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.awt.event.InputEvent; import java.awt.event.MouseAdapter; import java.awt.event.MouseEvent; import javax.swing.BorderFactory; import javax.swing.JFrame; import javax.swing.JMenuItem; import javax.swing.JPopupMenu; import javax.swing.JTextArea; import javax.swing.KeyStroke; import javax.swing.WindowConstants; public class Test02 { @SuppressWarnings(&quot;serial&quot;) class TextAreaMenu extends JTextArea{ // 菜单增加选项,复制,粘贴,剪切 JMenuItem copy = null, paste = null, cut = null; public TextAreaMenu(){ // 给当前组件添加右键菜单组件 JPopupMenu menu = new JPopupMenu(); menu.add(copy = new JMenuItem(&quot;复制&quot;)); menu.add(paste = new JMenuItem(&quot;粘贴&quot;)); menu.add(cut = new JMenuItem(&quot;剪切&quot;)); // 设置键盘操作 copy.setAccelerator(KeyStroke.getKeyStroke(&apos;C&apos;, InputEvent.CTRL_MASK)); paste.setAccelerator(KeyStroke.getKeyStroke(&apos;V&apos;, InputEvent.CTRL_MASK)); cut.setAccelerator(KeyStroke.getKeyStroke(&apos;X&apos;, InputEvent.CTRL_MASK)); // 设置边框增强显示效果 this.setBorder(BorderFactory.createLineBorder(Color.red)); this.addMouseListener(new MouseAdapter(){ // 当前组件的鼠标点击事件 @Override public void mouseClicked(MouseEvent e) { // MouseEvent.BUTTON1: 左键点击 // MouseEvent.BUTTON2: 中间点击(滑轮) if(e.getButton() == MouseEvent.BUTTON3){ // 设置右键点击事件,打开邮件菜单 menu.show(TextAreaMenu.this,e.getX(),e.getY()); // 设置选项是否可用 boolean isCanCopy = isCanCopy(); copy.setEnabled(isCanCopy); cut.setEnabled(isCanCopy); // 剪贴板是否存在数据 paste.setEnabled(isClipboardString()); } } }); // 初始化选项事件 initEvent(); } private void initEvent(){ copy.addActionListener(new ActionListener(){ @Override public void actionPerformed(ActionEvent e) { System.out.println(&quot;点击了复制按钮&quot;); TextAreaMenu.this.copy(); } }); paste.addActionListener(new ActionListener(){ @Override public void actionPerformed(ActionEvent e) { System.out.println(&quot;点击了粘贴按钮&quot;); TextAreaMenu.this.paste(); } }); cut.addActionListener(new ActionListener(){ @Override public void actionPerformed(ActionEvent e) { System.out.println(&quot;点击了剪切按钮&quot;); TextAreaMenu.this.cut(); } }); } /** * 当前文本组件是否可以复制 * true 具备 * false 不具备 * @return */ public boolean isCanCopy() { // getSelectionStart() 返回选定文本的起始位置。如果是空文档，则返回 0；如果没有选定，则返回点值。 int start = this.getSelectionStart(); // getSelectionEnd() 返回选定文本的结束位置。如果文本为空，则返回 0；如果没有选择，则返回点值。 int end = this.getSelectionEnd(); return start != end; } /** * 剪切板中是否有文本数据可供粘贴 * true 有文本数据 * false 无 * @return true为有文本数据 */ public boolean isClipboardString() { boolean b = false; // 获取剪贴板对象 Clipboard clipboard = this.getToolkit().getSystemClipboard(); try { // getContents(), 获取剪贴板对象中的数据对象,无则返回null Transferable content = clipboard.getContents(this); // getTransferData(), 获取数据对象中的值 if (content.getTransferData(DataFlavor.stringFlavor) instanceof String) { b = true; } } catch (Exception e) { return false; } return b; } } public static void main(String[] args) { JFrame jf = new JFrame(&quot;测试窗口&quot;); jf.setSize(600, 600); TextAreaMenu textAreaMenu = new Test02().new TextAreaMenu(); jf.setContentPane(textAreaMenu); jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); jf.setVisible(true); } } 显示:]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>SWING</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swing布局]]></title>
    <url>%2F2018%2F09%2F13%2Fswing%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[前言swing是Java中的一个gui库。现在已经很少看到有使用swing开发的项目了.我也一直没有真正的使用swing进行开发,只是在刚接触java时根据例子简单敲了一下。不过最近,公司正好有一个项目是以swing为基础进行二次开发的,作为一个几乎近似于刚接触swing的新手,在接下来的日子里简单记录一下学习swing的一些内容。以下,为swing中的关键,layout方面的内容。 BorderLayout一种非常简单常用的布局策略, 也是某些容器组件的默认布局管理器,即RootPaneContainer(JInternalFrame、JDialog、JFrame、JWindow),它将容器分为NORTH, SOUTH,CENTER，WEST，EAST五个区域, 每个区域最多只能有一个组件. East和West的组件在垂直方向上拉升，North和South的组件在水平方向上拉升,Center的组件可同时在水平和垂直方向上拉升，填满所有剩余空间. 使用方式： Container.add（component, BorderLayout.EAST）; 例： JFrame testFrame = new JFrame(); testFrame.setSize(600, 600); testFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); JPanel contentPane = new JPanel(); testFrame.setContentPane(contentPane); JButton button1 = new JButton(&quot;北&quot;); JButton button2 = new JButton(&quot;南&quot;); JButton button3 = new JButton(&quot;东&quot;); JButton button4 = new JButton(&quot;西&quot;); JButton button5 = new JButton(&quot;中央&quot;); testFrame.setLayout(new BorderLayout()); contentPane.add(button1, &quot;North&quot;); contentPane.add(button2, &quot;South&quot;); contentPane.add(button3, &quot;East&quot;); contentPane.add(button4, &quot;West&quot;); contentPane.add(button5, &quot;Center&quot;); testFrame.setVisible(true); // 具体可通过鼠标拖动窗体伸缩查看效果 显示: 若不指定第二个参数,则默认在BorderLayout.CENTER区域显示如果对同一个区域添加了多个组件，那么只显示最后添加的组件。 FlowLayout该布局是从左到右或从右到左方式排列，一行放不下就换到另外一行。因此它一行能放置多少组件取决于窗口的宽度。如果剩余空间小于组件，那么组件将在新行显示。注意它默认组件是居中对齐，可以通过FlowLayout(intalign)函数来指定对齐方式。是JPanel的默认的布局管理器 import java.awt.FlowLayout; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JPanel; public class Test01 { public static void main(String[] args) { JFrame testFrame = new JFrame(); testFrame.setSize(600, 600); testFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); JPanel panel = new JPanel(); testFrame.setContentPane(panel); FlowLayout layout = new FlowLayout(); testFrame.setLayout(layout); JButton button1 = new JButton(&quot;button1&quot;); JButton button2 = new JButton(&quot;button2&quot;); JButton button3 = new JButton(&quot;button3&quot;); JButton button4 = new JButton(&quot;button4&quot;); JButton button5 = new JButton(&quot;button5&quot;); panel.add(button1); panel.add(button2); panel.add(button3); panel.add(button4); panel.add(button5); testFrame.setVisible(true); } } // 具体可通过鼠标拖动窗体伸缩查看效果 注: // 设置组件之间的距离 setVgap(int vgap) 设置组件之间以及组件与 Container 的边之间的垂直间隙。 setHgap(int hgap) 设置组件之间以及组件与 Container 的边之间的水平间隙。 GridLayout网格式的布局,将整个容器划分成一定的行和一定的列，可以指定控件放在某行某列上,窗口改变的时候，组件的大小也会随之改变。每个单元格的大小一样，而且放置组件时，只能从左到右、由上到下的顺序填充，用户不能任意放置组件，比较的“死板”。 简单一点来说, GridLayout就类似于一个标准的表格,但是最麻烦的是,这种布局不能跨行和跨列,所以感觉应该很少能用到这个布局方式。虽然可以在子组件中设置不同的布局方式进行搭配,使展示效果达到跨行跨列的效果,但是这已经与GridLayout没什么关系了 GridLayout有三个构造方法 GridLayout() // 创建具有默认值的网格布局，即每个组件占据一行一列。 GridLayout(int rows, int cols) // 创建具有指定行数和列数的网格布局。 GridLayout(int rows, int cols, int hgap, int vgap) // 创建具有指定行数和列数的网格布局。 // 以GridLayout(int rows, int cols)为例： public static void main(String[] args) { JFrame testFrame = new JFrame(); testFrame.setSize(600, 600); testFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); JPanel panel = new JPanel(); testFrame.setContentPane(panel); GridLayout layout = new GridLayout(3,2); testFrame.setLayout(layout); JButton button1 = new JButton(&quot;button1&quot;); JButton button2 = new JButton(&quot;button2&quot;); JButton button3 = new JButton(&quot;button3&quot;); JButton button4 = new JButton(&quot;button4&quot;); JButton button5 = new JButton(&quot;button5&quot;); JButton button6 = new JButton(&quot;button6&quot;); panel.add(button1); panel.add(button2); panel.add(button3); panel.add(button4); panel.add(button5); panel.add(button6); testFrame.setVisible(true); } 显示： GridBagLayout上面说GridLayout无法跨行和跨列,那么使用GridBagLayout就可以达到跨行跨列的效果,我想,在正式环境中应该使用GridBagLayout的情况反而更多。 GridBagLayout比较复杂,需要通过GridBagConstraints类进行约束。 GridBagConstraints常用方法： fill ：指定填充方向，可以向水平，垂直或水平+垂直方向充满整个容器 gridx(), gridy() 指定组件在容器单元格内的行索引与列索引，如最左上的那个单元格式，其gridx为0，gridy为0。 gridwidth(), gridheight() ：指定单元格的跨行与跨列数 insets ：指定组件的外部填充，相当于单元格间距 weightx, weighty ：指定容器大小变动时，向x或y方向的伸缩率。 Anchor：当组件的大小小于可用显示区域时使用，指定组件在显示区域中的位置。 请见下图： ------------------------------------------------- |FIRST_LINE_START PAGE_START FIRST_LINE_END| | | | | |LINE_START CENTER LINE_END| | | | | |LAST_LINE_START PAGE_END LAST_LINE_END| ------------------------------------------------- 以下给出一个GridBagLayout的例子： import java.awt.Button; import java.awt.GridBagConstraints; import java.awt.GridBagLayout; import javax.swing.JFrame; public class GridBagLayoutTest { // 新建了一块场地 private JFrame f = new JFrame(&quot;小区&quot;); // 聘请了一位资深的园艺设计师 private GridBagLayout gb = new GridBagLayout(); // 要设计，就要有一张空白的设计图纸 private GridBagConstraints gbc = new GridBagConstraints(); // 订购了十棵树 private Button[] bs = new Button[11]; public void init() { f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); f.setSize(1000, 1000); // 指定设计师要设计的地盘 f.setLayout(gb); // 把十棵树先准备好 for (int i = 0; i &lt; bs.length; i++) { bs[i] = new Button(&quot;树&quot; + i); } // 启用组件横向、纵向上扩展的功能 gbc.fill = GridBagConstraints.BOTH; // 设置组件横向上扩展的比例，在一行上有多个组件时有用 gbc.weightx = 1; // 中第一棵树 addButton(bs[0]); // 中第二棵树 addButton(bs[1]); addButton(bs[2]); // 中的第四棵树是这一行的最后一棵树 gbc.gridwidth = GridBagConstraints.REMAINDER; addButton(bs[3]); // 中的第五课树会从第二行开始,这棵树也是该行最后一棵树，增加纵向长度 gbc.ipady = 20; addButton(bs[4]); // 从第三行开始种，横向占了两棵树的位置 gbc.ipady = 0; gbc.gridwidth = 2; addButton(bs[5]); // 第三行的最后一棵树，自然横向占两棵树的位置 gbc.gridwidth = GridBagConstraints.REMAINDER; addButton(bs[6]); // 第四行第一棵树恢复横向占一棵树的位置 gbc.gridwidth = 1; // 纵向跨越两个网格 gbc.gridheight = 2; addButton(bs[7]); // 种第四行最后一棵树，自然横向跨越三棵树的位置 gbc.gridwidth = GridBagConstraints.REMAINDER; // 恢复纵向跨越一个网格 gbc.gridheight = 1; addButton(bs[8]); // 接在第八棵树后面，但在第九棵树的下一行，真正实现了让第八棵树纵跨两行 addButton(bs[9]); // 第十一课树会出现在第五行，因为没有给gridwidth重新赋值，它就是第五行最后一棵树 // 将其设为纵向扩展，由于第十一棵树要纵向扩展，它会在上下两个方向不断膨胀，结果把它上面的组件都挤到 // 最上面去了 gbc.weighty = 1; addButton(bs[10]); // 使得场地的大小刚好容得下目前已种的树 // f.pack(); // 把设计好的场地展现出来 f.setVisible(true); } // 将当前的树如何植入小区，植入小区哪边的方法 private void addButton(Button button) { // 先要确保设计师手上有设计图纸和材料 gb.setConstraints(button, gbc); // 将树植入 f.add(button); } public static void main(String[] args) { new GridBagLayoutTest().init(); } } // 以上这个例子是我在网上找资料的时候在一个论坛上看到的,感觉可以很好说明GridBagLayout.具体链接地址在哪里忘记了,惭愧。不过感谢那位仁兄对我的帮助 CardLayoutCardLayout 对象是容器的布局管理器。它将容器中的每个组件看作一张卡片。一次只能看到一张卡片，容器则充当卡片的堆栈。当容器第一次显示时，第一个添加到 CardLayout 对象的组件为可见组件 CardLayout的布局感觉有点像之前我记单词时用的单词卡一样,还有在有些APP中点击切切换页面可能也会使用到CardLayout. 其实个人感觉来说,这个布局就像是常用的Tab页,如JTabbedPane,去除头部标题那一部分的效果 GroupLayoutGroupLayout是一个非常复杂的Layout,此布局有一个轴的概念. 水平轴与垂直抽. 这个布局我很少接触,贴一些引用,待需要用到时再查找 JavaSwing_1.5: GroupLayout（分组布局） How to use GroupLayout GroupLayout API 例： public static void main(String[] args) { JFrame jf = new JFrame(&quot;测试窗口&quot;); jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); // 创建内容面板容器 JPanel panel = new JPanel(); // 创建分组布局，并关联容器 GroupLayout layout = new GroupLayout(panel); // 设置容器的布局 panel.setLayout(layout); // 创建组件 JButton btn01 = new JButton(&quot;Button01&quot;); JButton btn02 = new JButton(&quot;Button02&quot;); JButton btn03 = new JButton(&quot;Button03&quot;); JButton btn04 = new JButton(&quot;Button04&quot;); JButton btn05 = new JButton(&quot;Button05&quot;); // 自动创建组件之间的间隙 layout.setAutoCreateGaps(true); // 自动创建容器与触到容器边框的组件之间的间隙 layout.setAutoCreateContainerGaps(true); /* * 水平组（仅确定 X 轴方向的坐标/排列方式） * * 水平串行: 水平排列（左右排列） * 水平并行: 垂直排列（上下排列） */ // 水平并行（上下） btn01 和 btn02 GroupLayout.ParallelGroup hParalGroup01 = layout.createParallelGroup().addComponent(btn01).addComponent(btn02); // 水平并行（上下）btn03 和 btn04 GroupLayout.ParallelGroup hParalGroup02 = layout.createParallelGroup().addComponent(btn03).addComponent(btn04); // 水平串行（左右）hParalGroup01 和 hParalGroup02 GroupLayout.SequentialGroup hSeqGroup = layout.createSequentialGroup().addGroup(hParalGroup01).addGroup(hParalGroup02); // 水平并行（上下）hSeqGroup 和 btn05 GroupLayout.ParallelGroup hParalGroup = layout.createParallelGroup().addGroup(hSeqGroup).addComponent(btn05, GroupLayout.Alignment.CENTER); layout.setHorizontalGroup(hParalGroup); // 指定布局的 水平组（水平坐标） /* * 垂直组（仅确定 Y 轴方向的坐标/排列方式） * * 垂直串行: 垂直排列（上下排列） * 垂直并行: 水平排列（左右排列） */ // 垂直并行（左右）btn01 和 btn03 GroupLayout.ParallelGroup vParalGroup01 = layout.createParallelGroup().addComponent(btn01).addComponent(btn03); // 垂直并行（左右）btn02 和 btn04 GroupLayout.ParallelGroup vParalGroup02 = layout.createParallelGroup().addComponent(btn02).addComponent(btn04); // 垂直串行（上下）vParalGroup01, vParalGroup02 和 btn05 GroupLayout.SequentialGroup vSeqGroup = layout.createSequentialGroup().addGroup(vParalGroup01).addGroup(vParalGroup02).addComponent(btn05); layout.setVerticalGroup(vSeqGroup); // 指定布局的 垂直组（垂直坐标） jf.setContentPane(panel); jf.pack(); jf.setLocationRelativeTo(null); jf.setVisible(true); } BoxLayoutBoxLayout也是一个比较强大的布局管理器, 它既可以设置横向排列页可以设置纵向排列。 主要排列方式包括 X_AXIS：从左到右水平布置组件。 Y_AXIS：从上到下垂直布置组件。 LINE_AXIS：根据容器的ComponentOrientation属性，按照行的方式排列，可以从左到右也可以从右到左 PAGE_AXIS：根据容器的ComponentOrientation,以页面的方式进行排列 关于BoxLayout通常与Box容器进行搭配使用，Box可以创建一些影响布局的组件提高显示效果。glue、struts 和 rigid 区域。 比如有时候我们希望不同的组件之间留一些间隔，空白区域，我们就可以在不同的组件之间利用Box创建一些隐藏不可见的组件。 Box类常用方法： createHorizontalBox() // 创建一个从左到右显示其组件的 Box。 createVerticalBox() // 创建一个从上到下显示其组件的 Box。 createHorizontalGlue() // 创建一个横向 glue 组件。 createVerticalGlue() // 创建一个纵向 glue 组件。 关于Boxlayout在网上看到很多写的很好的博客，这里抛砖引入，使用其中一个例子： package boxlayout.test; import java.awt.Component; import java.awt.Dimension; import java.awt.GridBagConstraints; import java.awt.GridBagLayout; import javax.swing.BorderFactory; import javax.swing.Box; import javax.swing.BoxLayout; import javax.swing.DefaultListModel; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JList; import javax.swing.JPanel; import javax.swing.JLabel; import javax.swing.JScrollPane; import javax.swing.JTable; import javax.swing.ListSelectionModel; import javax.swing.table.DefaultTableModel; public class BoxLayoutTest { static JPanel topPanel; static JPanel bottomPanel; static JPanel middlePanel; static void createTopPanel() { topPanel = new JPanel(); String[] columnName = { &quot;姓名&quot;, &quot;性别&quot;, &quot;单位&quot;, &quot;参加项目&quot;, &quot;备注&quot; }; String[][] rowData = { { &quot;张三&quot;, &quot;男&quot;, &quot;计算机系&quot;, &quot;100 米 ,200 米&quot;, &quot;&quot; }, { &quot;李四&quot;, &quot;男&quot;, &quot;化学系&quot;, &quot;100 米,铅球&quot;, &quot;&quot; }, }; // 创建表格 JTable table = new JTable(new DefaultTableModel(rowData, columnName)); // 创建包含表格的滚动窗格 JScrollPane scrollPane = new JScrollPane(table); scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS); // 定义 topPanel 的布局为 BoxLayout,BoxLayout 为垂直排列 topPanel.setLayout(new BoxLayout(topPanel, BoxLayout.Y_AXIS)); // 先加入一个不可见的 Strut,从而使 topPanel 对顶部留出一定的空间 topPanel.add(Box.createVerticalStrut(10)); // 加入包含表格的滚动窗格 topPanel.add(scrollPane); // 再加入一个不可见的 Strut,从而使 topPanel 和 middlePanel 之间留出一定的空间 topPanel.add(Box.createVerticalStrut(10)); } @SuppressWarnings({ &quot;rawtypes&quot;, &quot;unchecked&quot; }) static void createMiddlePanel() { // 创建 middlePanel middlePanel = new JPanel(); // 采用水平布局 middlePanel.setLayout(new BoxLayout(middlePanel, BoxLayout.X_AXIS)); // 创建标签运动会项目 JLabel sourceLabel = new JLabel(&quot;运动会项目：&quot;); sourceLabel.setAlignmentY(Component.TOP_ALIGNMENT); sourceLabel.setBorder(BorderFactory.createEmptyBorder(4, 5, 0, 5)); // 创建列表运动会项目 DefaultListModel listModel = new DefaultListModel(); listModel.addElement(&quot;100 米&quot;); listModel.addElement(&quot;200 米&quot;); listModel.addElement(&quot;400 米&quot;); listModel.addElement(&quot;跳远&quot;); listModel.addElement(&quot;跳高&quot;); listModel.addElement(&quot;铅球&quot;); JList sourceList = new JList(listModel); sourceList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION); sourceList.setVisibleRowCount(5); JScrollPane sourceListScroller = new JScrollPane(sourceList); sourceListScroller.setPreferredSize(new Dimension(120, 80)); sourceListScroller.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS); sourceListScroller.setAlignmentY(Component.TOP_ALIGNMENT); // 创建最左边的 Panel JPanel sourceListPanel = new JPanel(); // 最左边的 Panel 采用水平布局 sourceListPanel.setLayout(new BoxLayout(sourceListPanel, BoxLayout.X_AXIS)); // 加入标签到最左边的 Panel sourceListPanel.add(sourceLabel); // 加入列表运动会项目到最左边的 Panel sourceListPanel.add(sourceListScroller); sourceListPanel.setAlignmentY(Component.TOP_ALIGNMENT); sourceListPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 30)); // 将最左边的 Panel 加入到 middlePanel middlePanel.add(sourceListPanel); // 定义中间的两个按钮 JButton toTargetButton = new JButton(&quot;&gt;&gt;&quot;); JButton toSourceButton = new JButton(&quot;&lt;&lt;&quot;); // 定义中间的 Panel JPanel buttonPanel = new JPanel(); // 中间的 Panel 采用水平布局 buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.Y_AXIS)); // 将按钮 &gt;&gt; 加入到中间的 Panel buttonPanel.add(toTargetButton); // 两个按钮之间加入一个不可见的 rigidArea buttonPanel.add(Box.createRigidArea(new Dimension(15, 15))); // 将按钮 &lt;&lt; 加入到中间的 Panel buttonPanel.add(toSourceButton); buttonPanel.setAlignmentY(Component.TOP_ALIGNMENT); buttonPanel.setBorder(BorderFactory.createEmptyBorder(15, 5, 15, 5)); // 将中间的 Panel 加入到 middlePanel middlePanel.add(buttonPanel); // 创建标签查询项目 JLabel targetLabel = new JLabel(&quot;查询项目：&quot;); targetLabel.setAlignmentY(Component.TOP_ALIGNMENT); targetLabel.setBorder(BorderFactory.createEmptyBorder(4, 5, 0, 5)); // 创建列表查询项目 DefaultListModel targetListModel = new DefaultListModel(); targetListModel.addElement(&quot;100 米&quot;); JList targetList = new JList(targetListModel); targetList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION); targetList.setVisibleRowCount(5); JScrollPane targetListScroller = new JScrollPane(targetList); targetListScroller.setPreferredSize(new Dimension(120, 80)); targetListScroller.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS); targetListScroller.setAlignmentY(Component.TOP_ALIGNMENT); // 创建最右边的 Panel JPanel targetListPanel = new JPanel(); // 设置最右边的 Panel 为水平布局 targetListPanel.setLayout(new BoxLayout(targetListPanel, BoxLayout.X_AXIS)); // 将标签查询项目加到最右边的 Panel targetListPanel.add(targetLabel); // 将列表查询项目加到最右边的 Panel targetListPanel.add(targetListScroller); targetListPanel.setAlignmentY(Component.TOP_ALIGNMENT); targetListPanel.setBorder(BorderFactory.createEmptyBorder(0, 30, 0, 0)); // 最后将最右边的 Panel 加入到 middlePanel middlePanel.add(targetListPanel); } static void createBottomPanel() { // 创建查询按钮 JButton actionButton = new JButton(&quot;查询&quot;); // 创建退出按钮 JButton closeButton = new JButton(&quot;退出&quot;); // 创建 bottomPanel bottomPanel = new JPanel(); // 设置 bottomPanel 为垂直布局 bottomPanel.setLayout(new BoxLayout(bottomPanel, BoxLayout.Y_AXIS)); // 创建包含两个按钮的 buttonPanel JPanel buttonPanel = new JPanel(); // 设置 bottomPanel 为水平布局 buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.X_AXIS)); // 将查询按钮加入到 buttonPanel buttonPanel.add(actionButton); // 加入一个 glue, glue 会挤占两个按钮之间的空间 buttonPanel.add(Box.createHorizontalGlue()); // 将退出按钮加入到 buttonPanel buttonPanel.add(closeButton); // 加入一个 Strut,从而使 bottomPanel 和 middlePanel 上下之间留出距离 bottomPanel.add(Box.createVerticalStrut(10)); // 加入 buttonPanel bottomPanel.add(buttonPanel); // 加入一个 Strut,从而使 bottomPanel 和底部之间留出距离 bottomPanel.add(Box.createVerticalStrut(10)); } public static void main(String[] args) { // 创建 topPanel createTopPanel(); // 创建 middlePanel createMiddlePanel(); // 创建 bottomPanel createBottomPanel(); // 创建包含 topPanel,middlePanel 和 bottomPanel 的 panelContainer JPanel panelContainer = new JPanel(); // panelContainer 的布局为 GridBagLayout panelContainer.setLayout(new GridBagLayout()); GridBagConstraints c1 = new GridBagConstraints(); c1.gridx = 0; c1.gridy = 0; c1.weightx = 1.0; c1.weighty = 1.0; c1.fill = GridBagConstraints.BOTH; // 加入 topPanel panelContainer.add(topPanel, c1); GridBagConstraints c2 = new GridBagConstraints(); c2.gridx = 0; c2.gridy = 1; c2.weightx = 1.0; c2.weighty = 0; c2.fill = GridBagConstraints.HORIZONTAL; // 加入 middlePanel panelContainer.add(middlePanel, c2); GridBagConstraints c3 = new GridBagConstraints(); c3.gridx = 0; c3.gridy = 2; c3.weightx = 1.0; c3.weighty = 0; c3.fill = GridBagConstraints.HORIZONTAL; // 加入 bottomPanel panelContainer.add(bottomPanel, c3); // 创建窗体 JFrame frame = new JFrame(&quot;Boxlayout 演示&quot;); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); panelContainer.setOpaque(true); frame.setSize(new Dimension(480, 320)); frame.setContentPane(panelContainer); frame.setVisible(true); } } 参考： 运用 BoxLayout 进行 Swing 控件布局 Swing框式布局（BoxLayout，Box）应用详解 TableLayoutTableLayout不是JDK自带的布局管理器，使用TableLayout需要首先引入它的jar包， 如果是maven项目，可以在maven中央仓库找到这个jar包 TabLayout API TableLayout官方使用说明 如果有需要还是去官方文档去查看好了，里面有很多小demo可供参考。 对于官方文档中，行和列的大小设置，在此添加一点说明。 Tablelayout设定行和列，需要先定义一个二维数组，举例如下： double size [] [] = {{100, 0.50,0.20，TableLayout.FILL，200，TableLayout.FILL}， {TableLayout.FILL}; 其中size[0]设置的时列的宽度，size[1]设置的时列的高度。在宽度中有几个概念需要说明： 名称 含义 总宽度 顾名思义，即容器的总宽度 绝对宽度 分配绝对像素大小的所有列的宽度成为绝对宽度 可缩放宽度 可缩放宽度=总宽度-绝对宽度 绝对列 使用绝对宽度指定的列是绝对列 可伸缩列 使用百分比指定的列称为可伸缩列 填充列 使用TableLayout.FILL指定 首选列 使用TableLayout.PREFERRED指定 关于宽度的分配原则为： 先将总宽度分配给绝对列和首选列，然后将剩余宽度（可伸缩宽度）分配给可伸缩列，如果可伸缩列的总和小于100％，则会留下一些可扩展的宽度。然后，在所有填充列中均等地划分该可缩放宽度 还是照着上面的例子来看，上面使用了一个二维数组size[][]来定义当前容器的列。 第0列： 100px (绝对宽度) 第1列： (500-100-200)*0.5 = 100px; 第2列： (500-100-200)*0.2 = 40px; 第3列： (500-100-200)*0.3/2 = 30px; 第4列： 200px(绝对宽度) 第5列： 同3列 30px; 关于这个宽度计算，我之前看文档的时候被绕了一段事件才搞明白。写在这里以作参考 总结关于swing的布局策略，我的看法是，没有最好的layout，只有最适合当前业务场景的。能对不同的情况灵活选择，才是最好的。以上对一些常用的布局管理器进行了一些小小的总结，很多都是在网上查找资料是遇到的，我算是抛砖引玉了。当然，还有一些布局管理器没有说到，如：GridLayout，SpringLayout.等以后需要用到了再来查看吧。 另外留下SpringLayout的一些资源已备参考： SpringLayout 管理器 How to use SpringLayout SpringLayout API 参考： Java-Swing常用布局管理器 官方使用文档]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>SWING</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dream]]></title>
    <url>%2F2018%2F08%2F28%2Fdream%2F</url>
    <content type="text"><![CDATA[I don’t know what that dream is that you have. I don’t care how disappointing it might have been, as you’ve been working toward that dream. That dream that you are holding in your mind that is possible. That some of you already know that is hard. It’s not easy. It’s hard changing your life. That in the process of working on your dreams, you’re going to encounter a lot of disappointment, a lot of failure, a lot of pain. The moments when you’re going to doubt yourselves,ask god“why, why this happening to me. I am just trying to take care of my children and my mother. Am I trying to steal or rob from anybody? How does this have happened to me?” For those of you that have experienced some hardships, don’t give up for your dream. There are right time on the way to have come, but they have not come to be seen, they have come to past. Uniqueness is not this wonderful as all tell it delusive. God like featuring in that. Only the special among us are will ever take in something that truly exists in all of us. It’s very important for you to believe that you are the one. Most people they raise their family, they earn their living and then they die. They stop growing. They stop working on themselves. They stop stretching. They stop pushing themselves. That a lot of people like to complain but they don’t want to do anything about their situation. And most people don’t work on their dreams. Why? One is because of the fear, the fear of failure. What if things don’t work out? And the fear of success, what if they do and I can’t handle it. These are not risk takers. You spent so much time with other people. You spent so much time channel. You get other people to like you. You know other people more than you know yourselves. You study them. You know about them. You want to hang out like them. You want to be just like them. And you know what? Even better so much time and man, you don’t know who you are. I challenge you should spend time by yourselves. It’s necessary that you get the losers out of your life if you want to live your dream. But people who are running toward their dreams, life has a special kind of meaning. When you become the right person, what you do is to start separating yourselves from other people. You begin to have your certain uniqueness. As long as you following other people, as long as you will be a copy cat. You will never ever be the best copy cat in the world. But you will be the best you could be. I challenge you could find your value. That everybody want to see it, that everybody want to join you, that everybody want to have a vision, it’s necessary to know that you are uncommon breed, it’s necessary you’re allowing yourselves with people who are trying to enter your business who are hungry, people who are unstoppable and unreasonable, people who are refusing to live life just as it is and who want more. The people who are living their dreams are fighting winners to attach themselves to .The people that are living their dreams are the people they know if it’s gonna happen, it’s up to them. If you want to be more successful, if you want to have and don’t stop and never to be bored, let them all to invest in you, to invest in you, to invest in you. Someone has the opinion that you do not have to become your reality, that you don’t have to go through life being a victim. Even though you face disappointment, you have to know within yourselves. Can I do it? Even no one sees it from me, I am gonna see it from myself. This is what I believe and I am willing to die for, too. No matter how bad it is or how bad it gets, I am going to make it. I want to represent an ideal, I want to represent possibilities. At some of you right now, you wanna be , you know I wanna go to the next level. I am gonna count so. I want to be an engineer, I want to be a doctor. Listen to me, you can get to that level, you can get to the level economically where you wanna be. And to use time you invest in mind, you are not reading books, I am telling you that all the books are the compasses. I am telling you to invest time. I am telling you to be alone. I am telling you to spend out and get to know yourselves. When you become who you are, when you become the person that you are created to be, design to be who you’re designed to be. When you become an individual, what you do is you to take yourselves and you start submarine yourselves underpinned. I am telling you to get to a place where people don’t like you or bother you anymore. Why? Cause you are not consort with people and make them happy. Because you try more, you try to invest your mind. But you still talk about your dream, you still talk about your goal, because we are not done that big, just taking footsteps. That you can make your parents proud, you can make your school proud, you can charge millions of people’s life. And the world will never be the same again, because you came this way. Don’t let anybody steal your dream. Have we face our rejections and we have a meeting and no one shows up? And somebody says you can count on me and they don’t come through. What if we have that kind of attitude we don’t possess. Nobody believes in you and you’ve lost again again and again. Your life has cut off, but you still looking at your grieve, revealing it every day and the singular step is not over. I tell I aware, you can live your dream! 转自 2014全球最佳演讲「梦想」演讲稿]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用iframe下载文件]]></title>
    <url>%2F2018%2F03%2F08%2F%E4%BD%BF%E7%94%A8iframe%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[使用iframe下载文件 记录在工作中遇到的一个文件下载问题，之前使用的是a标签的download属性进行操作 例： &lt;a href=&quot;/images/20180305.jpg&quot; download=&quot;1&quot;&gt; 其中a标签的href对应下载文件的路径，download对应的是下载下来的文件名称 但是download属性只支持 Firefox 和 Chrome，所以只能选择其他的方式解决。改成了使用iframe可以进行文件下载 例： // 定义html标签 &lt;a href=&quot;#&quot; onclick=&quot;downloadPicture(url)&quot;&gt;imageName&lt;/a&gt;&apos; // 在body中添加一个隐藏的iframe进行文件下载 &lt;script type=&quot;text/javascript&quot;&gt; function downloadPicture(url){ $(&quot;#temp_iframe&quot;).remove(); $(&quot;body&quot;).append(&quot;&lt;iframe id=&apos;temp_iframe&apos; style=&apos;display:none&apos;&gt;&lt;/iframe&gt;&quot;); document.getElementById(&apos;temp_iframe&apos;).src = contextPath+url); } &lt;/script&gt; 之前在这里还遇到了一个坑，项目使用的是struts2基于注解的方式进行下载的，页面写完js下载之后每次下载都是一个xxx.html的文件，后来发现原因，在struts注解下载中要特别注意指定filename，以下贴一大概的样例： /** * 文件下载 * * @return * @throws Exception */ @Action(value = &quot;showWaterPicture&quot;, results = { @Result(name = SUCCESS, type = &quot;stream&quot;, params = { &quot;contentType&quot;,&quot;application/image/jpeg&quot;, &quot;inputName&quot;, &quot;inputStream&quot;, &quot;bufferSize&quot;, &quot;4096&quot;, &quot;contentDisposition&quot;,&quot;attachment;filename=${fileName}&quot;, &quot;contentCharSet&quot;, &quot;utf-8&quot; }) }) public String showWaterPicture() throws IOException { // 相关业务逻辑... }]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java8函数式编程]]></title>
    <url>%2F2018%2F02%2F27%2Fjava8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[FunctionalInterface注解 接口默认方法 Lambda表达式 方法引用 @FunctionalInterface注解Java8提供了函数式编程接口的概念。函数式接口：是只定义了单一抽象方法的接口，用作Lambda表达式的类型。如Runnable接口，就是一个典型的Functional Interface @FunctionalInterface public interface Runnable { public abstract void run(); } 理解FunctionalInterface（函数式接口）是学习Java8 Lambda表达式的关键所在。函数式接口能且仅有一个抽象方法，而不是只能有一个方法。 接口默认方法Java8之前版本接口只能包含抽象方法，Java8新增了接口的默认方法，接口也可以包含若干个实例方法。在Java8中，使用default关键字，可以在接口内定义实例方法，这个方法并非抽象方法，而是拥有特定逻辑的具体实例方法。 举个例子，鸟都会飞，定义接口Bird，包含一个默认方法fly() public interface Bird{ void eat(); default void fly() { System.out.println(&quot;bird can fly...&quot;); } } 定义一个Crow类实现接口Bird。 public class Crow implements Bird { @Override public void eat() { System.out.println(&quot;crow can eat&quot;); } } 测试： public class Test { public static void main(String[] args) { Crow crow = new Crow(); crow.fly(); crow.eat(); } } 输出结果： 具体的类里面不是必须重写默认方法，这一改进使得Java8拥有了类似多继承的能力 Lambda表达式Lambda表达式是函数式编程的核心。Lambda表达式即匿名函数，它是一段没有函数名的函数体，可以作为参数直接传递给相关的调用者。 还是拿Runnable为例： Runnable r = new Runnable() { public void run() { System.out.println(&quot;Hello World!&quot;); } }; new Thread(r).start(); 使用Lanbda表达式可以大大简化代码写法： new Thread(() -&gt; System.out.println(&quot;Hello World&quot;)).start(); 输出结果： Lambda表达式语法： 无参无返回值： () -&gt; { //..... }; 如： Runnable r = () -&gt; {} 无参有返回值： () -&gt; {return something}; // 定义接口 @FunctionalInterface public interface Bird { String eat(); } // Lambda表达式可写为： Bird bir = () -&gt; {return &quot;Hello World&quot;;}; 有参有返回值： (param1,param2..paramN) -&gt; {return something}; 如： // 定义接口 @FunctionalInterface public interface Bird { String eat(String str1,String str2); } Bird bird = (String apple,String orange) -&gt; {return &quot;吃饱了&quot;;}; 如： (int x, int y) -&gt; x + y (int x, int y) -&gt; {return x + y;} 当lambda表达式只包含一条语句时，甚至可以省略大括号{}。 param1 -&gt; statment 方法引用方法引用是Java8中提出的用来简化Lambda表达式的一种手段，它通过类名和方法名来定位一个静态方法或者实例方法。方法引用使用”::”定义，”::”的前半部分表示类名或者实例名，后半部分表示方法名称，如果是构造器函数，则使用new表示。 静态方法引用：ClassName::methodName List&lt;String&gt; strs = Arrays.asList(&quot;aa&quot;,&quot;bb&quot;,&quot;cc&quot;); strs.forEach(System.out::println); 实例方法引用：instanceRefence::methodName // 待更新...]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
